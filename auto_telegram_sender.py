import os
import time
import subprocess
import pyautogui
import pyperclip
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from webdriver_manager.chrome import ChromeDriverManager
from config import EMAIL, PASSWORD, MOUSE_COORDINATES, MOUSE_COORDINATES_lkm, HEADLESS_MODE, base_path
from enum import Enum

# –ò—Å–ø–æ–ª—å–∑—É–µ–º PHONE_NUMBERS_FILE –∏–∑ config.py
PHONE_NUMBERS_FILE = os.path.join('data', 'phone_numbers.txt')
if not os.path.exists('data'):
    os.makedirs('data', exist_ok=True)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ç–∞–π–º–∏–Ω–≥–æ–≤
WAIT_AFTER_OTP_REQUEST = 7
WAIT_BETWEEN_KEYSTROKES = 0.8
WAIT_FOR_TELEGRAM_WINDOW = 15
WAIT_COPY_OTP_ATTEMPTS = 10


class PhoneStatus(Enum):
    """–°—Ç–∞—Ç—É—Å—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–º–µ—Ä–æ–≤ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤"""
    UNPROCESSED = ""
    PROCESSED = "+"
    BANNED = "- BAN"
    NO_CODE = "- nocode"


class AutoTelegramSender:
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è Telegram"""
        self.phone_numbers = []
        self.current_page = 1
        self.base_path = base_path
        self.driver = None
        self.setup_driver()

    def setup_driver(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Chrome WebDriver –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ —Å–∞–π—Ç–∞"""
        chrome_options = Options()

        if HEADLESS_MODE:
            chrome_options.add_argument("--headless")

        chrome_options.add_argument("--no-sandbox")
        chrome_options.add_argument("--disable-dev-shm-usage")
        chrome_options.add_argument("--disable-gpu")
        chrome_options.add_argument("--window-size=1920,1080")

        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ ChromeDriver
        service = Service(ChromeDriverManager().install())
        self.driver = webdriver.Chrome(service=service, options=chrome_options)

    def read_phone_numbers(self):
        """–ß—Ç–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–æ–≤ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞ (—Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ)"""

        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –Ω–æ–º–µ—Ä–∞
        self.phone_numbers = self.load_unprocessed_numbers()

        if not self.phone_numbers:
            print("‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
            print("–í—Å–µ –Ω–æ–º–µ—Ä–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –∏–ª–∏ —Ñ–∞–π–ª –ø—É—Å—Ç.")
            return False

        return True

    def update_phone_status(self, phone_number, status: PhoneStatus):
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –Ω–æ–º–µ—Ä–∞"""
        try:
            with open(PHONE_NUMBERS_FILE, 'r', encoding='utf-8') as file:
                lines = file.readlines()

            with open(PHONE_NUMBERS_FILE, 'w', encoding='utf-8') as file:
                for line in lines:
                    if phone_number in line:
                        # –£–±–∏—Ä–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å—Ç–∞—Ç—É—Å—ã
                        clean_line = line.strip()
                        for existing_status in PhoneStatus:
                            if existing_status.value and existing_status.value in clean_line:
                                clean_line = clean_line.replace(existing_status.value, '').strip()

                        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
                        if status.value:
                            line = clean_line + ' ' + status.value + '\n'
                        else:
                            line = clean_line + '\n'
                    file.write(line)

            status_name = {
                PhoneStatus.PROCESSED: "–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–º",
                PhoneStatus.BANNED: "–∑–∞–±–∞–Ω–µ–Ω–Ω—ã–º",
                PhoneStatus.NO_CODE: "–±–µ–∑ –∫–æ–¥–∞"
            }.get(status, "–æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º")

            print(f"‚úÖ –ù–æ–º–µ—Ä {phone_number} –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ {status_name}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –Ω–æ–º–µ—Ä–∞ {phone_number}: {e}")

    def mark_number_as_processed(self, phone_number):
        """–û—Ç–º–µ—á–∞–µ—Ç –Ω–æ–º–µ—Ä –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π"""
        self.update_phone_status(phone_number, PhoneStatus.PROCESSED)

    def mark_number_as_banned(self, phone_number):
        """–û—Ç–º–µ—á–∞–µ—Ç –Ω–æ–º–µ—Ä –∫–∞–∫ –∑–∞–±–∞–Ω–µ–Ω–Ω—ã–π"""
        self.update_phone_status(phone_number, PhoneStatus.BANNED)

    def is_number_processed(self, line):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –±—ã–ª –ª–∏ –Ω–æ–º–µ—Ä —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω (–µ—Å—Ç—å –ª–∏ '+' –≤ –∫–æ–Ω—Ü–µ —Å—Ç—Ä–æ–∫–∏)"""
        return line.strip().endswith('+')

    def load_unprocessed_numbers(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤"""
        if not os.path.exists(PHONE_NUMBERS_FILE):
            print(f"‚ùå –§–∞–π–ª '{PHONE_NUMBERS_FILE}' –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return []

        try:
            with open(PHONE_NUMBERS_FILE, 'r', encoding='utf-8') as f:
                lines = f.readlines()

            unprocessed_numbers = []
            current_page = 1

            for line in lines:
                line = line.strip()

                # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É, –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–∞ –Ω–æ–≤–∞—è
                if line.startswith('=== –°—Ç—Ä–∞–Ω–∏—Ü–∞'):
                    page_num = line.split()[2]
                    self.current_page = int(page_num)
                    continue

                if line and not line.startswith('=') and not line.startswith('–ù–∞–π–¥–µ–Ω–Ω—ã–µ') and not line.startswith(
                        'URL:') and not line.startswith('–î–∞—Ç–∞:') and not line.startswith('–í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ:'):
                    if '+55' in line and not self.is_number_processed(line):
                        parts = line.split('.')
                        if len(parts) >= 2:
                            number = parts[1].strip()
                            if number.startswith('+55'):
                                unprocessed_numbers.append({
                                    'number': number,
                                    'page': self.current_page
                                })
                                print(f"üì± –ù–∞–π–¥–µ–Ω –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä: {number} (–°—Ç—Ä–∞–Ω–∏—Ü–∞ {self.current_page})")

            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(unprocessed_numbers)} –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤")
            return unprocessed_numbers

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
            return []

    def login_and_open_orders(self):
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–∞ —Å–∞–π—Ç–µ secondtg.org –∏ –æ—Ç–∫—Ä—ã—Ç–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã orders"""
        try:
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞
            self.driver.get("https://secondtg.org/login")
            time.sleep(1)

            # –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è —Ñ–æ—Ä–º—ã –≤—Ö–æ–¥–∞
            email_field = WebDriverWait(self.driver, 10).until(
                EC.presence_of_element_located((By.NAME, "email"))
            )

            # –í–≤–æ–¥–∏–º email
            email_field.clear()
            email_field.send_keys(EMAIL)

            # –ù–∞—Ö–æ–¥–∏–º –∏ –≤–≤–æ–¥–∏–º –ø–∞—Ä–æ–ª—å
            password_field = self.driver.find_element(By.NAME, "password")
            password_field.clear()
            password_field.send_keys(PASSWORD)

            # –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É –≤—Ö–æ–¥–∞
            login_button = self.driver.find_element(By.XPATH, "//button[contains(text(), 'Login')]")
            login_button.click()

            # –ñ–¥–µ–º —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            time.sleep(1)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ
            current_url = self.driver.current_url
            if "login" not in current_url.lower():
                print("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!")

                # –°—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É orders
                self.driver.get("https://secondtg.org/orders")
                time.sleep(1)
                return True
            else:
                print("‚ùå –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å")
                return False

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ orders: {e}")
            return False

    def open_telegram_with_number(self, phone_number):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ Telegram —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º"""
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å –Ω–æ–º–µ—Ä–æ–º
            folder_name = phone_number.replace('+', '').replace('-', '').replace(' ', '')
            folder_path = os.path.join(self.base_path, folder_name)
            telegram_path = os.path.join(folder_path, "Telegram.exe")

            if not os.path.exists(telegram_path):
                print(f"‚ùå Telegram.exe –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–∞–ø–∫–µ: {folder_path}")
                return False

            # –ó–∞–ø—É—Å–∫–∞–µ–º Telegram.exe
            subprocess.Popen([telegram_path])
            return True

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ Telegram –¥–ª—è {phone_number}: {e}")
            return False

    @staticmethod
    def wait_for_telegram_window(timeout=WAIT_FOR_TELEGRAM_WINDOW):
        import pygetwindow as gw
        start_time = time.time()

        while time.time() - start_time < timeout:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ–∫–Ω–∞ –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –∏—Ö
                all_windows = gw.getAllWindows()
                telegram_windows = []

                for window in all_windows:
                    title = window.title
                    title_lower = title.lower()

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–∞—Å—Ç–æ—è—â–µ–µ –æ–∫–Ω–æ Telegram
                    if (title in ['Telegram', 'Telegram Desktop'] and
                            # –ò—Å–∫–ª—é—á–∞–µ–º –æ–∫–Ω–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ —Ñ–∞–π–ª–æ–≤
                            'auto_telegram_sender.py' not in title and
                            '.py' not in title_lower and
                            ' ‚Äì ' not in title and
                            ' - ' not in title and
                            window.width > 300 and
                            window.height > 200 and
                            not window.isMinimized):
                        telegram_windows.append(window)

                if telegram_windows:
                    # –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –æ–∫–Ω–æ
                    window = telegram_windows[0]
                    print(f"‚úÖ –û–∫–Ω–æ Telegram –Ω–∞–π–¥–µ–Ω–æ: {window.title}")
                    return True

                time.sleep(0.5)

            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –æ–∫–Ω–∞ Telegram: {e}")
                time.sleep(1)

        print(f"‚ùå –û–∫–Ω–æ Telegram –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∑–∞ {timeout} —Å–µ–∫—É–Ω–¥")
        return False

    def enter_phone_number(self, phone_number):
        """–í–≤–æ–¥ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —á–µ—Ä–µ–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É"""
        try:
            # –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –æ–∫–Ω–∞ Telegram —á–µ—Ä–µ–∑ pygetwindow
            import pygetwindow as gw
            if not self.wait_for_telegram_window():
                print("‚ùå –û–∫–Ω–æ Telegram –Ω–µ –Ω–∞–π–¥–µ–Ω–æ! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.")
                return False
            time.sleep(2)
            # –ù–∞–∂–∏–º–∞–µ–º Enter 2 —Ä–∞–∑–∞
            pyautogui.press('enter')
            time.sleep(WAIT_BETWEEN_KEYSTROKES)
            pyautogui.press('enter')
            time.sleep(WAIT_BETWEEN_KEYSTROKES)
            # –ù–∞–∂–∏–º–∞–µ–º Backspace 3 —Ä–∞–∑–∞
            pyautogui.press('backspace')
            time.sleep(0.1)
            pyautogui.press('backspace')
            time.sleep(0.1)
            pyautogui.press('backspace')
            time.sleep(0.1)
            # –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
            pyautogui.write(phone_number)
            pyautogui.press('enter')
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ –Ω–æ–º–µ—Ä–∞ {phone_number}: {e}")
            return False

    def navigate_to_page(self, page_number):
        """–ü–µ—Ä–µ—Ö–æ–¥–∏—Ç –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ orders"""
        try:
            if page_number == 1:
                self.driver.get("https://secondtg.org/orders")
                time.sleep(2)
                return True

            max_attempts = 3
            for attempt in range(1, max_attempts + 1):
                try:
                    # 1. –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞–ø—Ä—è–º—É—é –ø–æ URL
                    self.driver.get(f"https://secondtg.org/orders?page={page_number}")
                    time.sleep(2)  # –î–∞–µ–º –≤—Ä–µ–º—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏

                    # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ URL (–ø–µ—Ä–≤–∏—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)
                    current_url = self.driver.current_url
                    if f"page={page_number}" in current_url:
                        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—à–ª–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É {page_number} (–ø–æ URL)")
                        return True

                    # 3. –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                    try:
                        # –ò—â–µ–º –ª—é–±–æ–π —ç–ª–µ–º–µ–Ω—Ç, —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –¥–ª—è —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–µ—Ä–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞)
                        phone_element = WebDriverWait(self.driver, 5).until(
                            EC.presence_of_element_located((By.XPATH,
                                                            f"//div[contains(@class, 'card-body') and contains(., '{self.phone_numbers[0]['number']}')]"))
                        )
                        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—à–ª–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É {page_number} (–ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É)")
                        return True
                    except:
                        pass

                    # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ –ø–∞–≥–∏–Ω–∞—Ü–∏—é (–µ—Å–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –º–µ—Ç–æ–¥—ã –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏)
                    try:
                        active_page = self.driver.find_element(By.CSS_SELECTOR,
                                                               ".v-pagination__item--active button").text
                        if active_page == str(page_number):
                            print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—à–ª–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É {page_number} (–ø–æ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏)")
                            return True
                    except:
                        pass

                    print(f"‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ {attempt}: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É {page_number}")
                    time.sleep(2)

                except Exception as e:
                    print(f"‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ {attempt}: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É {page_number}")
                    time.sleep(2)

            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É {page_number} –ø–æ—Å–ª–µ {max_attempts} –ø–æ–ø—ã—Ç–æ–∫")
            return False

        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            return False

    def find_and_click_request_otp(self, phone_number):
        """–ü–æ–∏—Å–∫ –∏ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ Request OTP –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞"""
        try:
            # –ò—â–µ–º card-body —Å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–Ω–æ–º–µ—Ä –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è —Å +)
            card_body = self.driver.find_element(By.XPATH,
                                                 f"//div[contains(@class, 'card-body') and contains(., '{phone_number}')]")

            # –ò—â–µ–º –∫–Ω–æ–ø–∫—É Request OTP –≤–Ω—É—Ç—Ä–∏ —ç—Ç–æ–≥–æ card-body
            request_otp_button = card_body.find_element(By.XPATH,
                                                        ".//button[contains(text(), 'Request OTP') or contains(text(), 'OTP')]")

            # –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É
            request_otp_button.click()
            print(f"‚úÖ –ö–Ω–æ–ø–∫–∞ Request OTP –Ω–∞–∂–∞—Ç–∞ –¥–ª—è –Ω–æ–º–µ—Ä–∞ {phone_number}")
            time.sleep(WAIT_AFTER_OTP_REQUEST)
            return True

        except Exception as e:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–Ω–æ–ø–∫—É Request OTP –¥–ª—è {phone_number}")
            return False

    def mark_number_as_nocode(self, phone_number):
        """–û—Ç–º–µ—á–∞–µ—Ç –Ω–æ–º–µ—Ä –∫–∞–∫ –Ω–µ –ø–æ–ª—É—á–∏–≤—à–∏–π –∫–æ–¥"""
        self.update_phone_status(phone_number, PhoneStatus.NO_CODE)

    def copy_otp_code_with_retry(self, phone_number, max_attempts=WAIT_COPY_OTP_ATTEMPTS):
        """–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ OTP –∫–æ–¥–∞ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏ –∏ –≤—Å—Ç–∞–≤–∫–∞ –≤ Telegram"""
        for attempt in range(1, max_attempts + 1):
            try:
                # –ò—â–µ–º card-body —Å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–Ω–æ–º–µ—Ä –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è —Å +)
                card_body = self.driver.find_element(By.XPATH,
                                                     f"//div[contains(@class, 'card-body') and contains(., '{phone_number}')]")
                # –ò—â–µ–º —Ç—Ä–µ—Ç—å—é –∫–Ω–æ–ø–∫—É –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è (–¥–ª—è OTP)
                copy_buttons = card_body.find_elements(By.XPATH,
                                                       ".//i[contains(@class, 'mdi-content-copy') and contains(@class, 'copy_address')]")
                if len(copy_buttons) >= 3:
                    # –ë–µ—Ä–µ–º —Ç—Ä–µ—Ç—å—é –∫–Ω–æ–ø–∫—É –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è (–¥–ª—è OTP)
                    otp_copy_button = copy_buttons[2]
                    # –ö–ª–∏–∫–∞–µ–º –Ω–∞ –∫–Ω–æ–ø–∫—É –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è OTP
                    otp_copy_button.click()
                    time.sleep(1)
                    # –ü–æ–ª—É—á–∞–µ–º —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞
                    otp_code = pyperclip.paste()
                    if otp_code and len(otp_code) > 0 and otp_code.strip():
                        print(f"‚úÖ OTP –∫–æ–¥ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω: {otp_code}")
                        if otp_code.strip().lower() == 'nocode':
                            return 'nocode'
                        # –í—Å—Ç–∞–≤–ª—è–µ–º OTP –∫–æ–¥ –≤ Telegram
                        pyautogui.write(otp_code)
                        time.sleep(3)
                        return otp_code
                    else:
                        if attempt < max_attempts:
                            print(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ OTP –∫–æ–¥–∞ (–ø–æ–ø—ã—Ç–∫–∞ {attempt}/{max_attempts})")
                            time.sleep(3)
                            continue
                        else:
                            print(f"‚ùå OTP –∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ {max_attempts} –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è –Ω–æ–º–µ—Ä–∞ {phone_number}")
                            return None
                else:
                    if attempt < max_attempts:
                        print(f"‚è≥ –ö–Ω–æ–ø–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ (–ø–æ–ø—ã—Ç–∫–∞ {attempt}/{max_attempts})")
                        time.sleep(3)
                        continue
                    else:
                        print(f"‚ùå –ö–Ω–æ–ø–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è OTP –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –Ω–æ–º–µ—Ä–∞ {phone_number}")
                        return None
            except Exception as e:
                # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –≤—ã–≤–æ–¥ –æ—à–∏–±–∫–∏ –±–µ–∑ stacktrace
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ OTP –¥–ª—è {phone_number} (–ø–æ–ø—ã—Ç–∫–∞ {attempt}/{max_attempts})")
                if attempt < max_attempts:
                    time.sleep(3)
                    continue
                else:
                    return None
        return None

    def leave_telegram_group(self):
        """–í—ã—Ö–æ–¥ –∏–∑ –≥—Ä—É–ø–ø—ã Telegram –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã—Ç–∏–µ–º"""

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        right_click_x, right_click_y = MOUSE_COORDINATES['right_click']
        left_click_x, left_click_y = MOUSE_COORDINATES['left_click']
        left_click_x2, left_click_y2 = MOUSE_COORDINATES_lkm['left_click']
        try:
            pyautogui.click(left_click_x2, left_click_y2)
            time.sleep(0.8)
            # –ù–∞–∂–∏–º–∞–µ–º Ctrl+F –¥–ª—è –ø–æ–∏—Å–∫–∞
            pyautogui.hotkey('ctrl', 'f')
            time.sleep(WAIT_BETWEEN_KEYSTROKES)

            # –í–≤–æ–¥–∏–º "sec" –¥–ª—è –ø–æ–∏—Å–∫–∞ –≥—Ä—É–ø–ø—ã
            pyautogui.write("sec")
            time.sleep(0.5)

            # –ù–∞–∂–∏–º–∞–µ–º –ø—Ä–∞–≤—É—é –∫–Ω–æ–ø–∫—É –º—ã—à–∏ –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
            pyautogui.rightClick(right_click_x, right_click_y)
            time.sleep(0.5)

            # –ù–∞–∂–∏–º–∞–µ–º –ª–µ–≤—É—é –∫–Ω–æ–ø–∫—É –º—ã—à–∏ –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º –¥–ª—è –≤—ã–±–æ—Ä–∞ "–í—ã–π—Ç–∏ –∏–∑ –≥—Ä—É–ø–ø—ã"
            pyautogui.click(left_click_x, left_click_y)
            time.sleep(0.5)

            pyautogui.press('enter')
            time.sleep(0.5)

            pyautogui.press('enter')
            time.sleep(0.5)

        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –≥—Ä—É–ø–ø—ã: {e}")

    def close_telegram(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ Telegram"""
        try:
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã Telegram
            os.system("taskkill /f /im Telegram.exe >nul 2>&1")
            time.sleep(1)
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ Telegram: {e}")

    def clean_number_folder(self, phone_number):
        """–û—á–∏—Å—Ç–∫–∞ –ø–∞–ø–∫–∏ –Ω–æ–º–µ—Ä–∞ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        try:
            import shutil
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å –Ω–æ–º–µ—Ä–æ–º
            folder_name = phone_number.replace('+', '').replace('-', '').replace(' ', '')
            folder_path = os.path.join(self.base_path, folder_name)
            if not os.path.exists(folder_path):
                return False
            # –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –∏ –ø–∞–ø–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
            items_to_remove = [
                "Telegram.exe",  # –£–¥–∞–ª—è–µ–º Telegram.exe
                "log.txt",
                "emoji",  # –£–¥–∞–ª—è–µ–º –ø–∞–ø–∫—É emoji –≤ –∫–æ—Ä–Ω–µ
            ]
            for item in items_to_remove:
                item_path = os.path.join(folder_path, item)
                if os.path.isfile(item_path):
                    try:
                        os.remove(item_path)
                    except Exception:
                        pass
                elif os.path.isdir(item_path):
                    try:
                        shutil.rmtree(item_path)
                    except Exception:
                        pass
            # –£–¥–∞–ª—è–µ–º –ø–∞–ø–∫—É emoji –≤–Ω—É—Ç—Ä–∏ tdata (–µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
            tdata_emoji_path = os.path.join(folder_path, "tdata", "emoji")
            if os.path.isdir(tdata_emoji_path):
                try:
                    shutil.rmtree(tdata_emoji_path)
                except Exception:
                    pass
            print(f"‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –ø–∞–ø–∫–∏ {phone_number}: {e}")
            return False

    def is_number_banned(self, phone_number):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–±–∞–Ω–µ–Ω –ª–∏ –Ω–æ–º–µ—Ä (–∏–º–µ–µ—Ç –ª–∏ —Å—Ç–∞—Ç—É—Å BR - BAN)"""
        try:
            # –ò—â–µ–º –∫–∞—Ä—Ç–æ—á–∫—É —Å –Ω–æ–º–µ—Ä–æ–º (–Ω–æ–º–µ—Ä –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è —Å +)
            card_body = self.driver.find_element(By.XPATH,
                                                 f"//div[contains(@class, 'card-body') and contains(., '{phone_number}')]")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –±–ª–æ–∫–∞ —Å BR - BAN
            ban_element = card_body.find_element(By.XPATH,
                                                 ".//h6[contains(@class, 'mb-1') and contains(., 'BR - BAN')]")
            return True
        except:
            # –ù–æ–º–µ—Ä –Ω–µ –∑–∞–±–∞–Ω–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º False –±–µ–∑ –≤—ã–≤–æ–¥–∞ –æ—à–∏–±–∫–∏
            return False

    def process_all_numbers(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –Ω–æ–º–µ—Ä–æ–≤ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤"""
        if not self.read_phone_numbers():
            return

        # –ê–≤—Ç–æ—Ä–∏–∑—É–µ–º—Å—è –∏ –æ—Ç–∫—Ä—ã–≤–∞–µ–º orders
        if not self.login_and_open_orders():
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –∏ –æ—Ç–∫—Ä—ã—Ç—å orders. –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É.")
            return

        successful_processes = 0
        failed_processes = 0
        banned_processes = 0  # –°—á–µ—Ç—á–∏–∫ –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤
        otp_codes = {}
        last_page = 1

        for i, phone_data in enumerate(self.phone_numbers, 1):
            phone_number = phone_data['number']
            page_number = phone_data['page']

            # –ï—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –Ω–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
            if page_number != last_page:
                if not self.navigate_to_page(page_number):
                    failed_processes += 1
                    continue
                last_page = page_number

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–±–∞–Ω–µ–Ω –ª–∏ –Ω–æ–º–µ—Ä
            if self.is_number_banned(phone_number):
                print(f"‚ö†Ô∏è –ù–æ–º–µ—Ä {phone_number} –∑–∞–±–∞–Ω–µ–Ω (BR - BAN), –æ—Ç–º–µ—á–∞–µ–º –∫–∞–∫ '- BAN'")
                self.mark_number_as_banned(phone_number)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥
                banned_processes += 1
                continue

            # –û—Ç–∫—Ä—ã–≤–∞–µ–º Telegram —Å –Ω–æ–º–µ—Ä–æ–º
            if not self.open_telegram_with_number(phone_number):
                failed_processes += 1
                continue

            if not self.enter_phone_number(phone_number):
                failed_processes += 1
                self.close_telegram()
                time.sleep(1)
                continue

            time.sleep(1)  # –î–∞–µ–º Telegram –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–≤–æ–¥ –Ω–æ–º–µ—Ä–∞

            if not self.find_and_click_request_otp(phone_number):
                failed_processes += 1
                self.close_telegram()
                time.sleep(1)
                continue

            otp_code = self.copy_otp_code_with_retry(phone_number)
            if otp_code and otp_code.strip().upper() == 'NOCODE':
                self.mark_number_as_nocode(phone_number)
                failed_processes += 1
                self.close_telegram()
                time.sleep(1)
                continue
            elif not otp_code:
                failed_processes += 1
                self.close_telegram()
                time.sleep(1)
                continue

            # —É—Å–ø–µ—à–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
            self.close_telegram()  # –°–Ω–∞—á–∞–ª–∞ –∑–∞–∫—Ä—ã–≤–∞–µ–º Telegram
            self.clean_number_folder(phone_number)  # –ü–æ—Ç–æ–º —á–∏—Å—Ç–∏–º –ø–∞–ø–∫—É
            otp_codes[phone_number] = otp_code
            successful_processes += 1
            self.mark_number_as_processed(phone_number)
            time.sleep(1)

            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –Ω–æ–º–µ—Ä–∞–º–∏
            if i < len(self.phone_numbers):
                time.sleep(0.5)

        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {successful_processes}")
        print(f"üö´ –ó–∞–±–∞–Ω–µ–Ω–æ: {banned_processes}")
        print(f"‚ùå –û—à–∏–±–æ–∫: {failed_processes}")
        print(f"üìä –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {len(self.phone_numbers)}")

        # –í—ã–≤–æ–¥–∏–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ OTP –∫–æ–¥—ã –≤ –∫–æ–Ω—Å–æ–ª—å
        if otp_codes:
            print(f"\nüìã –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ OTP –∫–æ–¥—ã:")
            for phone, code in otp_codes.items():
                print(f"  {phone}: {code}")

    def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –±—Ä–∞—É–∑–µ—Ä–∞ –∏ –æ—á–∏—Å—Ç–∫–∞"""
        if self.driver:
            self.driver.quit()
        # –£–±–∏—Ä–∞–µ–º –≤—ã–∑–æ–≤ close_telegram() –æ—Ç—Å—é–¥–∞, —Ç–∞–∫ –∫–∞–∫ –æ–Ω —É–∂–µ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –≤ process_all_numbers


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    sender = AutoTelegramSender()

    try:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –Ω–æ–º–µ—Ä–æ–≤
        sender.process_all_numbers()

    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –ü—Ä–æ—Ü–µ—Å—Å –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
    except Exception as e:
        print(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
    finally:
        sender.close()


if __name__ == "__main__":
    main()
