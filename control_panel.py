import tkinter as tk
from tkinter import ttk, scrolledtext, messagebox, filedialog
import threading
import queue
import os
import time
import sys
from datetime import datetime
import json

# –ò–º–ø–æ—Ä—Ç –≤–∞—à–∏—Ö —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –º–æ–¥—É–ª–µ–π –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô
import config
from auto_telegram_sender import AutoTelegramSender
from phone_parser import PhoneNumberParser
from create_telegram_folders import create_folders_and_copy_telegram
from config import *


class RoundedFrame(tk.Frame):
    """–ö–∞—Å—Ç–æ–º–Ω—ã–π Frame —Å –∑–∞–∫—Ä—É–≥–ª–µ–Ω–Ω—ã–º–∏ —É–≥–ª–∞–º–∏"""

    def __init__(self, parent, bg='#ffffff', corner_radius=10, **kwargs):
        super().__init__(parent, **kwargs)
        self.bg = bg
        self.corner_radius = corner_radius
        self.configure(bg=bg)


class ExpandableCard(tk.Frame):
    """–†–∞—Å—à–∏—Ä—è–µ–º–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π"""

    def __init__(self, parent, title, bg='#ffffff', **kwargs):
        super().__init__(parent, bg=parent['bg'], **kwargs)

        self.title = title
        self.bg = bg
        self.is_expanded = False
        self.content_frame = None

        # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞
        self.header_frame = tk.Frame(self, bg=bg, cursor='hand2')
        self.header_frame.pack(fill='x')

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–Ω–∏ –∏ –∑–∞–∫—Ä—É–≥–ª–µ–Ω–∏—è (–∏–º–∏—Ç–∞—Ü–∏—è)
        self.configure(relief='flat', bd=0)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∏–∫–æ–Ω–∫–æ–π
        header_content = tk.Frame(self.header_frame, bg=bg)
        header_content.pack(fill='x', padx=15, pady=12)

        self.title_label = tk.Label(header_content, text=title,
                                    font=('Segoe UI', 11, 'bold'),
                                    fg='#323130', bg=bg)
        self.title_label.pack(side='left')

        self.arrow_label = tk.Label(header_content, text='‚ñ∂',
                                    font=('Segoe UI', 10),
                                    fg='#605e5c', bg=bg)
        self.arrow_label.pack(side='right')

        # –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π
        self.header_frame.bind('<Button-1>', self.toggle_expand)
        header_content.bind('<Button-1>', self.toggle_expand)
        self.title_label.bind('<Button-1>', self.toggle_expand)
        self.arrow_label.bind('<Button-1>', self.toggle_expand)

        # Hover —ç—Ñ—Ñ–µ–∫—Ç—ã
        self.header_frame.bind('<Enter>', self.on_enter)
        self.header_frame.bind('<Leave>', self.on_leave)

    def on_enter(self, e):
        """Hover —ç—Ñ—Ñ–µ–∫—Ç"""
        self.header_frame.configure(bg='#f3f2f1')
        self.title_label.configure(bg='#f3f2f1')
        self.arrow_label.configure(bg='#f3f2f1')

    def on_leave(self, e):
        """–£–±—Ä–∞—Ç—å hover —ç—Ñ—Ñ–µ–∫—Ç"""
        self.header_frame.configure(bg=self.bg)
        self.title_label.configure(bg=self.bg)
        self.arrow_label.configure(bg=self.bg)

    def toggle_expand(self, event=None):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞—Å–∫—Ä—ã—Ç–∏—è/—Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è"""
        if self.is_expanded:
            self.collapse()
        else:
            self.expand()

    def expand(self):
        """–†–∞—Å–∫—Ä—ã—Ç–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏"""
        if self.content_frame:
            self.content_frame.pack(fill='x', padx=15, pady=(0, 15))
        self.arrow_label.configure(text='‚ñº')
        self.is_expanded = True
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–∫—Ä–æ–ª–ª –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞
        self.master.after(50, self._update_parent_scroll)

    def collapse(self):
        """–°–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏"""
        if self.content_frame:
            self.content_frame.pack_forget()
        self.arrow_label.configure(text='‚ñ∂')
        self.is_expanded = False
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–∫—Ä–æ–ª–ª –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞
        self.master.after(50, self._update_parent_scroll)

    def _update_parent_scroll(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∫—Ä–æ–ª–ª–∞ –ª–µ–≤–æ–π –ø–∞–Ω–µ–ª–∏"""
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –≥–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å
        if hasattr(self, '_control_panel'):
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ª–µ–≤—ã–π —Å–∫—Ä–æ–ª–ª
            if hasattr(self._control_panel, 'update_left_scroll'):
                self._control_panel.update_left_scroll()

    def set_content(self, content_frame):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∫–∞—Ä—Ç–æ—á–∫–∏"""
        self.content_frame = content_frame


class TelegramControlPanel:
    def __init__(self):
        self.root = tk.Tk()
        self.root.title("üì± Telegram Automation Manager")
        self.root.geometry("1200x800")
        self.root.configure(bg='#f5f5f5')
        self.root.minsize(1000, 600)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª–µ–π Windows 11
        self.setup_styles()

        # –û—á–µ—Ä–µ–¥—å –¥–ª—è –º–µ–∂–ø–æ—Ç–æ—á–Ω–æ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
        self.message_queue = queue.Queue()

        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        self.is_parsing = False
        self.is_processing = False
        self.auto_sender = None
        self.parser = None

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            'processed': 0,
            'banned': 0,
            'no_code': 0,
            'errors': 0,
            'total': 0
        }

        self.setup_ui()
        self.update_stats()

        # –ó–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.root.after(100, self.process_queue)

    def setup_styles(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã—Ö —Å—Ç–∏–ª–µ–π"""
        style = ttk.Style()
        style.theme_use('clam')

        # –£–ª—É—á—à–µ–Ω–Ω–∞—è –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–∞—è —Ü–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞
        self.colors = {
            'primary': '#0066cc',  # –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å–∏–Ω–∏–π
            'primary_dark': '#0052a3',
            'primary_light': '#4d94ff',
            'secondary': '#f0f4f8',  # –°–≤–µ—Ç–ª–æ-–≥–æ–ª—É–±–æ–π —Ñ–æ–Ω
            'background': '#ffffff',
            'surface': '#f8f9fa',
            'card_shadow': '#e0e6ed',
            'text': '#2c3e50',  # –¢–µ–º–Ω–æ-—Å–µ—Ä—ã–π —Ç–µ–∫—Å—Ç
            'text_secondary': '#718096',
            'success': '#38a169',  # –ó–µ–ª–µ–Ω—ã–π —É—Å–ø–µ—Ö
            'warning': '#ed8936',  # –û—Ä–∞–Ω–∂–µ–≤–æ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
            'error': '#e53e3e',  # –ö—Ä–∞—Å–Ω–∞—è –æ—à–∏–±–∫–∞
            'border': '#e2e8f0',  # –°–µ—Ä–∞—è –≥—Ä–∞–Ω–∏—Ü–∞
            'hover': '#edf2f7'  # Hover —ç—Ñ—Ñ–µ–∫—Ç
        }

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª–µ–π ttk
        style.configure('Title.TLabel',
                        font=('Segoe UI', 24, 'normal'),
                        foreground=self.colors['primary'],
                        background='#f5f5f5')

        style.configure('Heading.TLabel',
                        font=('Segoe UI', 12, 'bold'),
                        foreground=self.colors['text'],
                        background=self.colors['background'])

        style.configure('Custom.TButton',
                        font=('Segoe UI', 10),
                        padding=(20, 10))

        style.configure('Status.TLabel',
                        font=('Segoe UI', 9),
                        foreground=self.colors['text_secondary'])

    def create_card(self, parent, title, content_height=200):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –≤ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–º —Å—Ç–∏–ª–µ"""
        card_frame = tk.Frame(parent, bg=self.colors['background'],
                              relief='flat', bd=1)
        card_frame.configure(highlightbackground=self.colors['border'],
                             highlightthickness=1)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞—Ä—Ç–æ—á–∫–∏
        header_frame = tk.Frame(card_frame, bg=self.colors['secondary'], height=40)
        header_frame.pack(fill='x')
        header_frame.pack_propagate(False)

        title_label = tk.Label(header_frame, text=title,
                               font=('Segoe UI', 11, 'bold'),
                               fg=self.colors['text'],
                               bg=self.colors['secondary'])
        title_label.pack(side='left', padx=15, pady=12)

        # –ö–æ–Ω—Ç–µ–Ω—Ç –∫–∞—Ä—Ç–æ—á–∫–∏
        content_frame = tk.Frame(card_frame, bg=self.colors['background'])
        content_frame.pack(fill='both', expand=True, padx=15, pady=15)

        return card_frame, content_frame

    def create_action_button(self, parent, text, command, style='primary', icon=''):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–π –∫–Ω–æ–ø–∫–∏"""
        colors = {
            'primary': (self.colors['primary'], '#ffffff'),
            'secondary': (self.colors['surface'], self.colors['text']),
            'success': (self.colors['success'], '#ffffff'),
            'warning': (self.colors['warning'], '#ffffff'),
            'error': (self.colors['error'], '#ffffff')
        }

        bg_color, fg_color = colors.get(style, colors['primary'])

        btn = tk.Button(parent,
                        text=f"{icon} {text}" if icon else text,
                        command=command,
                        bg=bg_color,
                        fg=fg_color,
                        font=('Segoe UI', 10),
                        relief='flat',
                        cursor='hand2',
                        padx=20,
                        pady=8,
                        border=0)

        # Hover —ç—Ñ—Ñ–µ–∫—Ç—ã
        def on_enter(e):
            if style == 'primary':
                btn.configure(bg=self.colors['primary_dark'])
            else:
                btn.configure(bg=self.lighten_color(bg_color))

        def on_leave(e):
            btn.configure(bg=bg_color)

        btn.bind('<Enter>', on_enter)
        btn.bind('<Leave>', on_leave)

        return btn

    def setup_ui(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π"""

        # ==== –ó–ê–ì–û–õ–û–í–û–ö ====
        header_frame = tk.Frame(self.root, bg='#ffffff', height=70)
        header_frame.pack(fill='x')
        header_frame.pack_propagate(False)

        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–Ω—å
        shadow_frame = tk.Frame(self.root, bg='#e1dfdd', height=2)
        shadow_frame.pack(fill='x')

        header_content = tk.Frame(header_frame, bg='#ffffff')
        header_content.pack(fill='both', expand=True, padx=25, pady=15)

        # –õ–æ–≥–æ—Ç–∏–ø –∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫
        title_frame = tk.Frame(header_content, bg='#ffffff')
        title_frame.pack(side='left')

        main_title = tk.Label(title_frame, text="üì± Telegram Automation Manager",
                              font=('Segoe UI', 18, 'bold'),
                              fg=self.colors['primary'],
                              bg='#ffffff')
        main_title.pack(anchor='w')

        subtitle = tk.Label(title_frame, text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–µ–π –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥",
                            font=('Segoe UI', 9),
                            fg=self.colors['text_secondary'],
                            bg='#ffffff')
        subtitle.pack(anchor='w', pady=(2, 0))

        # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å—Ç–∞—Ç—É—Å–∞
        status_frame = tk.Frame(header_content, bg='#ffffff')
        status_frame.pack(side='right')

        self.status_indicator = tk.Label(status_frame, text="üü¢",
                                         font=('Segoe UI', 14),
                                         bg='#ffffff')
        self.status_indicator.pack(side='left', padx=(0, 8))

        self.main_status_label = tk.Label(status_frame, text="–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞",
                                          font=('Segoe UI', 10, 'bold'),
                                          fg=self.colors['success'],
                                          bg='#ffffff')
        self.main_status_label.pack(side='left')

        # ==== –û–°–ù–û–í–ù–û–ô –ö–û–ù–¢–ï–ù–¢ –ë–ï–ó –ü–†–û–ö–†–£–¢–ö–ò ====
        main_content_frame = tk.Frame(self.root, bg='#f5f5f5')
        main_content_frame.pack(fill='both', expand=True)

        # –ö–æ–Ω—Ç–µ–Ω—Ç –æ—Å–Ω–æ–≤–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏
        main_content = tk.Frame(main_content_frame, bg='#f5f5f5')
        main_content.pack(fill='both', expand=True, padx=20, pady=15)

        # –í–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.create_stats_panel(main_content)

        # –°—Ä–µ–¥–Ω—è—è –ø–∞–Ω–µ–ª—å - –¥–µ–π—Å—Ç–≤–∏—è –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        content_container = tk.Frame(main_content, bg='#f5f5f5')
        content_container.pack(fill='both', expand=True, pady=(15, 0))

        # –õ–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ (—Ä–∞—Å—à–∏—Ä—è–µ–º—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏) —Å –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–∫—Ä–æ–ª–ª–æ–º
        left_column_container = tk.Frame(content_container, bg='#f5f5f5', width=380)
        left_column_container.pack(side='left', fill='both', padx=(0, 15))
        left_column_container.pack_propagate(False)

        # –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π Canvas —Å–æ —Å–∫—Ä–æ–ª–ª–æ–º –¥–ª—è –ª–µ–≤–æ–π –ø–∞–Ω–µ–ª–∏
        left_canvas = tk.Canvas(left_column_container, bg='#f5f5f5', highlightthickness=0)
        left_scrollbar = ttk.Scrollbar(left_column_container, orient='vertical', command=left_canvas.yview)
        left_scrollable_frame = tk.Frame(left_canvas, bg='#f5f5f5')

        def configure_left_scroll(event=None):
            # –û–±–Ω–æ–≤–ª—è–µ–º scrollregion –¥–ª—è –ª–µ–≤–æ–π –ø–∞–Ω–µ–ª–∏
            left_canvas.configure(scrollregion=left_canvas.bbox('all'))
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É –ª–µ–≤–æ–≥–æ —Ñ—Ä–µ–π–º–∞
            if event and event.widget == left_canvas:
                canvas_width = event.width
                left_canvas.itemconfig(left_canvas_window, width=canvas_width)

        left_scrollable_frame.bind('<Configure>', configure_left_scroll)
        left_canvas.bind('<Configure>', configure_left_scroll)

        left_canvas_window = left_canvas.create_window((0, 0), window=left_scrollable_frame, anchor='nw')
        left_canvas.configure(yscrollcommand=left_scrollbar.set)

        left_canvas.pack(side='left', fill='both', expand=True)
        left_scrollbar.pack(side='right', fill='y')

        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Å–∫—Ä–æ–ª–ª –∫–æ–ª–µ—Å–∏–∫–∞ –º—ã—à–∏ –¥–ª—è –ª–µ–≤–æ–π –ø–∞–Ω–µ–ª–∏
        def _on_left_mousewheel(event):
            left_canvas.yview_scroll(int(-1 * (event.delta / 120)), 'units')

        def _bind_to_left_mousewheel(event):
            # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –ª–µ–≤—ã–π —Å–∫—Ä–æ–ª–ª
            left_canvas.bind_all('<MouseWheel>', _on_left_mousewheel)

        def _unbind_from_left_mousewheel(event):
            # –û—Ç–≤—è–∑—ã–≤–∞–µ–º –ª–µ–≤—ã–π —Å–∫—Ä–æ–ª–ª
            left_canvas.unbind_all('<MouseWheel>')

        left_canvas.bind('<Enter>', _bind_to_left_mousewheel)
        left_canvas.bind('<Leave>', _unbind_from_left_mousewheel)

        # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–∫—Ä–æ–ª–ª–∞ –ª–µ–≤–æ–π –ø–∞–Ω–µ–ª–∏
        def update_left_scroll():
            left_canvas.update_idletasks()
            configure_left_scroll()

        self.update_left_scroll = update_left_scroll

        self.create_expandable_control_panel(left_scrollable_frame)

        # –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        right_column = tk.Frame(content_container, bg='#f5f5f5')
        right_column.pack(side='right', fill='both', expand=True)

        self.create_monitoring_panel(right_column)

        # ==== –ù–ò–ñ–ù–Ø–Ø –ü–ê–ù–ï–õ–¨ - –°–¢–ê–¢–£–° ====
        bottom_frame = tk.Frame(self.root, bg='#ffffff', height=40)
        bottom_frame.pack(fill='x')
        bottom_frame.pack_propagate(False)

        # –¢–µ–Ω—å —Å–≤–µ—Ä—Ö—É
        shadow_top = tk.Frame(self.root, bg='#e1dfdd', height=1)
        shadow_top.pack(fill='x', before=bottom_frame)

        status_content = tk.Frame(bottom_frame, bg='#ffffff')
        status_content.pack(fill='both', expand=True, padx=25, pady=10)

        self.bottom_status = tk.Label(status_content, text="–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ",
                                      font=('Segoe UI', 8),
                                      fg=self.colors['text_secondary'],
                                      bg='#ffffff')
        self.bottom_status.pack(side='left')

        # –í—Ä–µ–º—è
        self.time_label = tk.Label(status_content, text="",
                                   font=('Segoe UI', 8),
                                   fg=self.colors['text_secondary'],
                                   bg='#ffffff')
        self.time_label.pack(side='right')
        self.update_time()

    def create_stats_panel(self, parent):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å –∑–∞–∫—Ä—É–≥–ª–µ–Ω–Ω—ã–º–∏ –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏"""
        stats_frame = tk.Frame(parent, bg='#f5f5f5')
        stats_frame.pack(fill='x', pady=(0, 15))

        # –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏
        stat_configs = [
            ('–í—Å–µ–≥–æ –Ω–æ–º–µ—Ä–æ–≤', 'total', 'üìä', self.colors['primary']),
            ('–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ', 'processed', '‚úÖ', self.colors['success']),
            ('–ó–∞–±–∞–Ω–µ–Ω–æ', 'banned', 'üö´', self.colors['error']),
            ('–ë–µ–∑ –∫–æ–¥–∞', 'no_code', '‚ö†Ô∏è', self.colors['warning']),
            ('–û—à–∏–±–∫–∏', 'errors', '‚ùå', self.colors['error'])
        ]

        self.stat_widgets = {}

        for i, (title, key, icon, color) in enumerate(stat_configs):
            # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∑–∞–∫—Ä—É–≥–ª–µ–Ω–∏—è
            stat_container = tk.Frame(stats_frame, bg='#f5f5f5')
            stat_container.pack(side='left', fill='both', expand=True,
                                padx=(0, 8) if i < len(stat_configs) - 1 else (0, 0))

            # –û—Å–Ω–æ–≤–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ —Å —Ç–µ–Ω—å—é
            stat_card = tk.Frame(stat_container, bg=self.colors['background'],
                                 relief='flat', bd=0)
            stat_card.pack(fill='both', expand=True, padx=1, pady=1)

            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–Ω—å (–∏–º–∏—Ç–∞—Ü–∏—è)
            shadow_frame = tk.Frame(stat_container, bg='#e0e0e0', height=2)
            shadow_frame.pack(fill='x')

            # –ò–∫–æ–Ω–∫–∞
            icon_label = tk.Label(stat_card, text=icon,
                                  font=('Segoe UI', 18),
                                  bg=self.colors['background'])
            icon_label.pack(pady=(12, 3))

            # –ó–Ω–∞—á–µ–Ω–∏–µ
            value_label = tk.Label(stat_card, text="0",
                                   font=('Segoe UI', 22, 'bold'),
                                   fg=color,
                                   bg=self.colors['background'])
            value_label.pack()

            # –ù–∞–∑–≤–∞–Ω–∏–µ
            title_label = tk.Label(stat_card, text=title,
                                   font=('Segoe UI', 9),
                                   fg=self.colors['text_secondary'],
                                   bg=self.colors['background'])
            title_label.pack(pady=(2, 12))

            self.stat_widgets[key] = value_label

    def create_expandable_control_panel(self, parent):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å —Ä–∞—Å—à–∏—Ä—è–µ–º—ã–º–∏ –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏"""

        # === –ö–ê–†–¢–û–ß–ö–ê –ü–ê–†–°–ò–ù–ì–ê ===
        parsing_card = ExpandableCard(parent, "üì± –ü–∞—Ä—Å–∏–Ω–≥ –Ω–æ–º–µ—Ä–æ–≤", bg=self.colors['background'])
        parsing_card._control_panel = self  # –ü–µ—Ä–µ–¥–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –≥–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å
        parsing_card.pack(fill='x', pady=(0, 10))

        # –ö–æ–Ω—Ç–µ–Ω—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞
        parsing_content = tk.Frame(parsing_card, bg=self.colors['background'])

        # –°—Ç–∏–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ —Å –∑–∞–∫—Ä—É–≥–ª–µ–Ω–∏—è–º–∏
        btn_frame1 = tk.Frame(parsing_content, bg=self.colors['background'])
        btn_frame1.pack(fill='x', pady=3)

        start_parse_btn = self.create_rounded_button(btn_frame1, "üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–∞—Ä—Å–µ—Ä",
                                                     self.start_parsing, 'primary')
        start_parse_btn.pack(fill='x')

        btn_frame3 = tk.Frame(parsing_content, bg=self.colors['background'])
        btn_frame3.pack(fill='x', pady=3)

        show_numbers_btn = self.create_rounded_button(btn_frame3, "üìã –ü–æ–∫–∞–∑–∞—Ç—å –Ω–æ–º–µ—Ä–∞",
                                                      self.show_numbers, 'secondary')
        show_numbers_btn.pack(fill='x')

        parsing_card.set_content(parsing_content)

        # === –ö–ê–†–¢–û–ß–ö–ê –°–û–ó–î–ê–ù–ò–Ø –ü–ê–ü–û–ö ===
        folders_card = ExpandableCard(parent, "üìÅ –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–æ–∫", bg=self.colors['background'])
        folders_card._control_panel = self  # –ü–µ—Ä–µ–¥–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –≥–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å
        folders_card.pack(fill='x', pady=(0, 10))

        # –ö–æ–Ω—Ç–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–æ–∫
        folders_content = tk.Frame(folders_card, bg=self.colors['background'])

        btn_frame_folders1 = tk.Frame(folders_content, bg=self.colors['background'])
        btn_frame_folders1.pack(fill='x', pady=3)

        create_folders_btn = self.create_rounded_button(btn_frame_folders1, "üìÅ –°–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫–∏",
                                                        self.create_folders, 'success')
        create_folders_btn.pack(fill='x')

        btn_frame_folders2 = tk.Frame(folders_content, bg=self.colors['background'])
        btn_frame_folders2.pack(fill='x', pady=3)

        open_folder_btn = self.create_rounded_button(btn_frame_folders2, "üóÇÔ∏è –û—Ç–∫—Ä—ã—Ç—å –±–∞–∑–æ–≤—É—é –ø–∞–ø–∫—É",
                                                     self.open_base_folder, 'secondary')
        open_folder_btn.pack(fill='x')

        folders_card.set_content(folders_content)

        # === –ö–ê–†–¢–û–ß–ö–ê –û–ë–†–ê–ë–û–¢–ö–ò ===
        processing_card = ExpandableCard(parent, "ü§ñ –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–º–µ—Ä–æ–≤", bg=self.colors['background'])
        processing_card._control_panel = self  # –ü–µ—Ä–µ–¥–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –≥–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å
        processing_card.pack(fill='x', pady=(0, 10))

        # –ö–æ–Ω—Ç–µ–Ω—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏
        processing_content = tk.Frame(processing_card, bg=self.colors['background'])

        btn_frame4 = tk.Frame(processing_content, bg=self.colors['background'])
        btn_frame4.pack(fill='x', pady=3)

        start_proc_btn = self.create_rounded_button(btn_frame4, "‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É",
                                                    self.start_processing, 'primary')
        start_proc_btn.pack(fill='x')

        btn_frame5 = tk.Frame(processing_content, bg=self.colors['background'])
        btn_frame5.pack(fill='x', pady=3)

        pause_btn = self.create_rounded_button(btn_frame5, "‚è∏Ô∏è –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å",
                                               self.pause_processing, 'warning')
        pause_btn.pack(fill='x')

        btn_frame6 = tk.Frame(processing_content, bg=self.colors['background'])
        btn_frame6.pack(fill='x', pady=3)

        stop_proc_btn = self.create_rounded_button(btn_frame6, "‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å",
                                                   self.stop_processing, 'error')
        stop_proc_btn.pack(fill='x')

        btn_frame7 = tk.Frame(processing_content, bg=self.colors['background'])
        btn_frame7.pack(fill='x', pady=3)

        reset_btn = self.create_rounded_button(btn_frame7, "üîÑ –°–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏",
                                               self.reset_stats, 'secondary')
        reset_btn.pack(fill='x')

        processing_card.set_content(processing_content)

        # –û–±–Ω–æ–≤–ª—è–µ–º –ª–µ–≤—ã–π —Å–∫—Ä–æ–ª–ª –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –≤—Å–µ—Ö –∫–∞—Ä—Ç–æ—á–µ–∫
        if hasattr(self, 'update_left_scroll'):
            self.root.after(150, self.update_left_scroll)

        # === –ö–ê–†–¢–û–ß–ö–ê –£–ü–†–ê–í–õ–ï–ù–ò–Ø –§–ê–ô–õ–ê–ú–ò ===
        files_card = ExpandableCard(parent, "üìÇ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏", bg=self.colors['background'])
        files_card._control_panel = self  # –ü–µ—Ä–µ–¥–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –≥–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å
        files_card.pack(fill='x', pady=(0, 10))

        # –ö–æ–Ω—Ç–µ–Ω—Ç —Ñ–∞–π–ª–æ–≤
        files_content = tk.Frame(files_card, bg=self.colors['background'])

        btn_frame9 = tk.Frame(files_content, bg=self.colors['background'])
        btn_frame9.pack(fill='x', pady=3)

        export_btn = self.create_rounded_button(btn_frame9, "üìä –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤",
                                                self.export_results, 'secondary')
        export_btn.pack(fill='x')

        btn_frame10 = tk.Frame(files_content, bg=self.colors['background'])
        btn_frame10.pack(fill='x', pady=3)

        settings_btn = self.create_rounded_button(btn_frame10, "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏",
                                                  self.open_settings, 'secondary')
        settings_btn.pack(fill='x')

        btn_frame11 = tk.Frame(files_content, bg=self.colors['background'])
        btn_frame11.pack(fill='x', pady=3)

        clear_btn = self.create_rounded_button(btn_frame11, "üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ",
                                               self.clear_data, 'error')
        clear_btn.pack(fill='x')

        files_card.set_content(files_content)

        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä–∞—Å–∫—Ä—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é –∫–∞—Ä—Ç–æ—á–∫—É
        parsing_card.expand()

        # –§–∏–Ω–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–µ–≤–æ–≥–æ —Å–∫—Ä–æ–ª–ª–∞ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –≤—Å–µ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        if hasattr(self, 'update_left_scroll'):
            self.root.after(250, self.update_left_scroll)

    def create_rounded_button(self, parent, text, command, style='primary'):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∏–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–π –∫–Ω–æ–ø–∫–∏ —Å –∑–∞–∫—Ä—É–≥–ª–µ–Ω–∏—è–º–∏"""
        colors = {
            'primary': {
                'bg': self.colors['primary'],
                'fg': '#ffffff',
                'hover': self.colors['primary_dark']
            },
            'secondary': {
                'bg': self.colors['surface'],
                'fg': self.colors['text'],
                'hover': '#e9ecef'
            },
            'success': {
                'bg': self.colors['success'],
                'fg': '#ffffff',
                'hover': '#0e6e0e'
            },
            'warning': {
                'bg': self.colors['warning'],
                'fg': '#ffffff',
                'hover': '#e67e00'
            },
            'error': {
                'bg': self.colors['error'],
                'fg': '#ffffff',
                'hover': '#c23616'
            }
        }

        style_config = colors.get(style, colors['primary'])

        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ –∑–∞–∫—Ä—É–≥–ª–µ–Ω–∏—è
        btn_container = tk.Frame(parent, bg=parent['bg'])

        btn = tk.Button(btn_container,
                        text=text,
                        command=command,
                        bg=style_config['bg'],
                        fg=style_config['fg'],
                        font=('Segoe UI', 9, 'bold'),
                        relief='flat',
                        cursor='hand2',
                        pady=10,
                        border=0,
                        activebackground=style_config['hover'],
                        activeforeground=style_config['fg'])

        btn.pack(fill='x', padx=2, pady=1)  # –ù–µ–±–æ–ª—å—à–∏–µ –æ—Ç—Å—Ç—É–ø—ã –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ –∑–∞–∫—Ä—É–≥–ª–µ–Ω–∏—è

        # Hover —ç—Ñ—Ñ–µ–∫—Ç—ã
        def on_enter(e):
            btn.configure(bg=style_config['hover'])

        def on_leave(e):
            btn.configure(bg=style_config['bg'])

        btn.bind('<Enter>', on_enter)
        btn.bind('<Leave>', on_leave)

        return btn_container

    def create_monitoring_panel(self, parent):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å –∑–∞–∫—Ä—É–≥–ª–µ–Ω–Ω—ã–º–∏ –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏"""

        # –ü—Ä–æ–≥—Ä–µ—Å—Å –∫–∞—Ä—Ç–æ—á–∫–∞ —Å –∑–∞–∫—Ä—É–≥–ª–µ–Ω–∏—è–º–∏
        progress_container = tk.Frame(parent, bg='#f5f5f5')
        progress_container.pack(fill='x', pady=(0, 15))

        progress_card = tk.Frame(progress_container, bg=self.colors['background'], relief='flat', bd=0)
        progress_card.pack(fill='x', padx=1, pady=1)

        # –¢–µ–Ω—å –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞—Ä—Ç–æ—á–∫–∏
        progress_shadow = tk.Frame(progress_container, bg='#e0e0e0', height=2)
        progress_shadow.pack(fill='x')

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        progress_header = tk.Frame(progress_card, bg=self.colors['secondary'], height=35)
        progress_header.pack(fill='x')
        progress_header.pack_propagate(False)

        progress_title = tk.Label(progress_header, text="üìà –ü—Ä–æ–≥—Ä–µ—Å—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è",
                                  font=('Segoe UI', 10, 'bold'),
                                  fg=self.colors['text'],
                                  bg=self.colors['secondary'])
        progress_title.pack(side='left', padx=12, pady=8)

        # –ö–æ–Ω—Ç–µ–Ω—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        progress_content = tk.Frame(progress_card, bg=self.colors['background'])
        progress_content.pack(fill='x', padx=15, pady=12)

        self.progress_bar = ttk.Progressbar(progress_content,
                                            mode='determinate',
                                            length=300)
        self.progress_bar.pack(fill='x', pady=(0, 5))

        self.progress_text = tk.Label(progress_content, text="–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ",
                                      font=('Segoe UI', 9),
                                      fg=self.colors['text_secondary'],
                                      bg=self.colors['background'])
        self.progress_text.pack(anchor='w')

        # –õ–æ–≥–∏ –∫–∞—Ä—Ç–æ—á–∫–∞ —Å –∑–∞–∫—Ä—É–≥–ª–µ–Ω–∏—è–º–∏
        logs_container = tk.Frame(parent, bg='#f5f5f5')
        logs_container.pack(fill='both', expand=True)

        logs_card = tk.Frame(logs_container, bg=self.colors['background'], relief='flat', bd=0)
        logs_card.pack(fill='both', expand=True, padx=1, pady=1)

        # –¢–µ–Ω—å –¥–ª—è –ª–æ–≥–æ–≤ –∫–∞—Ä—Ç–æ—á–∫–∏
        logs_shadow = tk.Frame(logs_container, bg='#e0e0e0', height=2)
        logs_shadow.pack(fill='x')

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ª–æ–≥–æ–≤
        logs_header = tk.Frame(logs_card, bg=self.colors['secondary'])
        logs_header.pack(fill='x')

        logs_header_content = tk.Frame(logs_header, bg=self.colors['secondary'])
        logs_header_content.pack(fill='x', padx=12, pady=8)

        logs_title = tk.Label(logs_header_content, text="üìù –ñ—É—Ä–Ω–∞–ª –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è",
                              font=('Segoe UI', 10, 'bold'),
                              fg=self.colors['text'],
                              bg=self.colors['secondary'])
        logs_title.pack(side='left')

        # –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ª–æ–≥–æ–≤
        clear_logs_btn = tk.Button(logs_header_content, text="üóëÔ∏è",
                                   command=self.clear_logs,
                                   font=('Segoe UI', 8),
                                   bg=self.colors['surface'],
                                   fg=self.colors['text'],
                                   relief='flat',
                                   cursor='hand2',
                                   padx=8, pady=2)
        clear_logs_btn.pack(side='right')

        # –ö–æ–Ω—Ç–µ–Ω—Ç –ª–æ–≥–æ–≤
        logs_content = tk.Frame(logs_card, bg=self.colors['background'])
        logs_content.pack(fill='both', expand=True, padx=12, pady=12)

        # –û–±–ª–∞—Å—Ç—å –ª–æ–≥–æ–≤
        self.logs_text = scrolledtext.ScrolledText(logs_content,
                                                   bg='#fafafa',
                                                   fg=self.colors['text'],
                                                   font=('Consolas', 8),
                                                   wrap='word',
                                                   relief='flat',
                                                   bd=0,
                                                   height=15)
        self.logs_text.configure(highlightbackground=self.colors['border'],
                                 highlightthickness=1)
        self.logs_text.pack(fill='both', expand=True)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–≥–æ–≤ –¥–ª—è –ª–æ–≥–æ–≤
        self.logs_text.tag_configure('INFO', foreground=self.colors['text'])
        self.logs_text.tag_configure('SUCCESS', foreground=self.colors['success'])
        self.logs_text.tag_configure('WARNING', foreground=self.colors['warning'])
        self.logs_text.tag_configure('ERROR', foreground=self.colors['error'])

    def lighten_color(self, color):
        """–û—Å–≤–µ—Ç–ª–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –¥–ª—è hover —ç—Ñ—Ñ–µ–∫—Ç–æ–≤"""
        return color  # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è

    def log_message(self, message, level='INFO'):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ª–æ–≥"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        formatted_message = f"[{timestamp}] {message}\n"
        self.message_queue.put(('log', formatted_message, level))

    def update_status(self, status, level='INFO'):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞"""
        colors = {
            'INFO': (self.colors['primary'], 'üîµ'),
            'SUCCESS': (self.colors['success'], 'üü¢'),
            'WARNING': (self.colors['warning'], 'üü°'),
            'ERROR': (self.colors['error'], 'üî¥')
        }

        color, icon = colors.get(level, colors['INFO'])
        self.message_queue.put(('main_status', status, color, icon))

    def update_progress(self, value, max_value=100, text=""):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä–∞"""
        self.message_queue.put(('progress', value, max_value, text))

    def update_time(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏"""
        current_time = datetime.now().strftime("%H:%M:%S")
        self.time_label.configure(text=current_time)
        self.root.after(1000, self.update_time)

    def clear_logs(self):
        """–û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤"""
        self.logs_text.delete(1.0, 'end')

    def process_queue(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            while True:
                message_type, *args = self.message_queue.get_nowait()

                if message_type == 'log':
                    message, level = args
                    self.logs_text.insert('end', message, level)
                    self.logs_text.see('end')

                elif message_type == 'main_status':
                    status, color, icon = args
                    self.main_status_label.configure(text=status, fg=color)
                    self.status_indicator.configure(text=icon)
                    self.bottom_status.configure(text=status)

                elif message_type == 'progress':
                    value, max_value, text = args
                    if max_value > 0:
                        self.progress_bar.configure(maximum=max_value, value=value)
                        progress_percent = (value / max_value) * 100
                        display_text = f"{text} ({progress_percent:.1f}%)" if text else f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {progress_percent:.1f}%"
                        self.progress_text.configure(text=display_text)

                elif message_type == 'stats':
                    self.update_stats_display()

        except queue.Empty:
            pass

        self.root.after(100, self.process_queue)

    def update_stats_display(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        for key, widget in self.stat_widgets.items():
            widget.configure(text=str(self.stats[key]))

    # ==== –ú–ï–¢–û–î–´ –£–ü–†–ê–í–õ–ï–ù–ò–Ø (—Ç–µ –∂–µ —á—Ç–æ –∏ —Ä–∞–Ω—å—à–µ) ====

    def start_parsing(self):
        """–ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        if self.is_parsing:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ü–∞—Ä—Å–µ—Ä —É–∂–µ –∑–∞–ø—É—â–µ–Ω!")
            return

        def parse_thread():
            try:
                self.is_parsing = True
                self.log_message("–ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞ –Ω–æ–º–µ—Ä–æ–≤...", 'INFO')
                self.update_status("–ü–∞—Ä—Å–∏–Ω–≥ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ...", 'INFO')

                self.parser = PhoneNumberParser()

                # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
                start_page = getattr(config, 'START_PAGE', 1)
                end_page = getattr(config, 'END_PAGE', 10)

                # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Å –ø–µ—Ä–µ–¥–∞—á–µ–π —Å—Ç–∞—Ä—Ç–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                self.log_message("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è...", 'INFO')
                if not self.parser.login(start_page):
                    self.log_message("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏!", 'ERROR')
                    self.update_status("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏", 'ERROR')
                    return

                self.log_message("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!", 'SUCCESS')

                # –ü–∞—Ä—Å–∏–Ω–≥
                self.log_message(f"–ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä–∞–Ω–∏—Ü {start_page}-{end_page}...", 'INFO')
                phone_numbers = self.parser.parse_all_pages(start_page, end_page)

                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
                self.log_message("–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...", 'INFO')
                self.parser.save_results(phone_numbers)

                self.stats['total'] = len(phone_numbers)
                self.message_queue.put(('stats',))

                self.log_message(f"–ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω! –ù–∞–π–¥–µ–Ω–æ {len(phone_numbers)} –Ω–æ–º–µ—Ä–æ–≤", 'SUCCESS')
                self.update_status("–ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω", 'SUCCESS')

            except Exception as e:
                self.log_message(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {str(e)}", 'ERROR')
                self.update_status("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞", 'ERROR')
            finally:
                self.is_parsing = False
                if self.parser:
                    self.parser.close()

        threading.Thread(target=parse_thread, daemon=True).start()

    def stop_parsing(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞"""
        if not self.is_parsing:
            messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–ü–∞—Ä—Å–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω!")
            return

        self.is_parsing = False
        if self.parser:
            self.parser.close()

        self.log_message("–ü–∞—Ä—Å–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º", 'WARNING')
        self.update_status("–ü–∞—Ä—Å–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", 'WARNING')

    def create_folders(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–æ–∫ —Å –Ω–æ–º–µ—Ä–∞–º–∏"""

        def create_thread():
            try:
                self.log_message("–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–æ–∫ —Å –Ω–æ–º–µ—Ä–∞–º–∏...", 'INFO')
                self.update_status("–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–æ–∫...", 'INFO')

                create_folders_and_copy_telegram()

                self.log_message("–ü–∞–ø–∫–∏ —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!", 'SUCCESS')
                self.update_status("–ü–∞–ø–∫–∏ —Å–æ–∑–¥–∞–Ω—ã", 'SUCCESS')

            except Exception as e:
                self.log_message(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–æ–∫: {str(e)}", 'ERROR')
                self.update_status("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–æ–∫", 'ERROR')

        threading.Thread(target=create_thread, daemon=True).start()

    def open_base_folder(self):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ –±–∞–∑–æ–≤–æ–π –ø–∞–ø–∫–∏ —Å –Ω–æ–º–µ—Ä–∞–º–∏"""
        try:
            import subprocess
            import platform

            # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
            folder_path = getattr(config, 'base_path', 'C:\\Users\\')

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏
            if not os.path.exists(folder_path):
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞:\n{folder_path}")
                self.log_message(f"–ë–∞–∑–æ–≤–∞—è –ø–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {folder_path}", 'ERROR')
                return

            # –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–∞–ø–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –û–°
            system = platform.system().lower()
            if system == 'windows':
                os.startfile(folder_path)
            elif system == 'darwin':  # macOS
                subprocess.Popen(['open', folder_path])
            else:  # Linux
                subprocess.Popen(['xdg-open', folder_path])

            self.log_message(f"–û—Ç–∫—Ä—ã—Ç–∞ –±–∞–∑–æ–≤–∞—è –ø–∞–ø–∫–∞: {folder_path}", 'INFO')

        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É:\n{str(e)}")
            self.log_message(f"–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –±–∞–∑–æ–≤–æ–π –ø–∞–ø–∫–∏: {str(e)}", 'ERROR')

    def start_processing(self):
        """–ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–º–µ—Ä–æ–≤"""
        if self.is_processing:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞!")
            return

        def process_thread():
            try:
                self.is_processing = True
                self.log_message("–ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–º–µ—Ä–æ–≤...", 'INFO')
                self.update_status("–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ...", 'INFO')

                # –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ AutoTelegramSender
                self.auto_sender = AutoTelegramSender()

                # –ß—Ç–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–æ–≤
                if not self.auto_sender.read_phone_numbers():
                    self.log_message("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–æ–º–µ—Ä–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏!", 'ERROR')
                    self.update_status("–ù–µ—Ç –Ω–æ–º–µ—Ä–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏", 'WARNING')
                    return

                total_numbers = len(self.auto_sender.phone_numbers)
                self.stats['total'] = total_numbers

                self.log_message(f"–ù–∞–π–¥–µ–Ω–æ {total_numbers} –Ω–æ–º–µ—Ä–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏", 'INFO')

                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∂–¥–æ–≥–æ –Ω–æ–º–µ—Ä–∞
                for i, phone_number in enumerate(self.auto_sender.phone_numbers, 1):
                    if not self.is_processing:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫—É
                        break

                    self.log_message(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–º–µ—Ä–∞ {i}/{total_numbers}: {phone_number}", 'INFO')
                    self.update_progress(i, total_numbers, f"–ù–æ–º–µ—Ä {i}/{total_numbers}")

                    try:
                        # –ó–¥–µ—Å—å –≤—ã–∑—ã–≤–∞—é—Ç—Å—è –º–µ—Ç–æ–¥—ã –∏–∑ –≤–∞—à–µ–≥–æ –∫–ª–∞—Å—Å–∞ –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô
                        success = self.auto_sender.process_single_number(phone_number)

                        if success:
                            self.stats['processed'] += 1
                            self.log_message(f"–ù–æ–º–µ—Ä {phone_number} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω", 'SUCCESS')
                        else:
                            self.stats['errors'] += 1
                            self.log_message(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–º–µ—Ä–∞ {phone_number}", 'ERROR')

                    except Exception as e:
                        self.stats['errors'] += 1
                        self.log_message(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {phone_number}: {str(e)}", 'ERROR')

                    self.message_queue.put(('stats',))
                    time.sleep(1)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –Ω–æ–º–µ—Ä–∞–º–∏

                self.log_message("–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–º–µ—Ä–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!", 'SUCCESS')
                self.update_status("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞", 'SUCCESS')

            except Exception as e:
                self.log_message(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}", 'ERROR')
                self.update_status("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞", 'ERROR')
            finally:
                self.is_processing = False
                if self.auto_sender and self.auto_sender.driver:
                    self.auto_sender.driver.quit()

        threading.Thread(target=process_thread, daemon=True).start()

    def pause_processing(self):
        """–ü–∞—É–∑–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        if not self.is_processing:
            messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞!")
            return

        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø–∞—É–∑—ã
        self.log_message("–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞", 'WARNING')
        self.update_status("–ü–∞—É–∑–∞", 'WARNING')

    def stop_processing(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        if not self.is_processing:
            messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞!")
            return

        self.is_processing = False
        self.log_message("–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º", 'WARNING')
        self.update_status("–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ", 'WARNING')

    def reset_stats(self):
        """–°–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        self.stats = {
            'processed': 0,
            'banned': 0,
            'no_code': 0,
            'errors': 0,
            'total': 0
        }
        self.message_queue.put(('stats',))
        self.log_message("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–±—Ä–æ—à–µ–Ω–∞", 'INFO')

    def show_numbers(self):
        """–ü–æ–∫–∞–∑ –Ω–æ–º–µ—Ä–æ–≤ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –æ–∫–Ω–µ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        numbers_window = tk.Toplevel(self.root)
        numbers_window.title("üìã –°–ø–∏—Å–æ–∫ –Ω–æ–º–µ—Ä–æ–≤")
        numbers_window.geometry("900x700")
        numbers_window.configure(bg='#f5f5f5')

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header = tk.Frame(numbers_window, bg='#ffffff', height=60)
        header.pack(fill='x')
        header.pack_propagate(False)

        title = tk.Label(header, text="üìã –°–ø–∏—Å–æ–∫ –Ω–æ–º–µ—Ä–æ–≤ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ (–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ)",
                         font=('Segoe UI', 16, 'bold'),
                         fg=self.colors['primary'],
                         bg='#ffffff')
        title.pack(pady=20)

        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        button_frame = tk.Frame(numbers_window, bg='#f5f5f5')
        button_frame.pack(fill='x', padx=20, pady=(0, 10))

        def save_numbers():
            """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤"""
            try:
                content = text_area.get('1.0', 'end-1c')
                os.makedirs('data', exist_ok=True)
                with open(os.path.join('data', 'phone_numbers.txt'), 'w', encoding='utf-8') as f:
                    f.write(content)

                # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–º–µ—Ä–æ–≤
                import re
                phone_pattern = r'\+\d{10,15}'
                phone_numbers = re.findall(phone_pattern, content)
                total_count = len(phone_numbers)

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                self.stats['total'] = total_count
                self.message_queue.put(('stats',))

                messagebox.showinfo("–£—Å–ø–µ—Ö", f"–ù–æ–º–µ—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!\n–í—Å–µ–≥–æ –Ω–æ–º–µ—Ä–æ–≤: {total_count}")
                self.log_message(f"–ù–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –≤—Ä—É—á–Ω—É—é. –í—Å–µ–≥–æ: {total_count}", 'INFO')

                # –ó–∞–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ
                numbers_window.destroy()

            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {str(e)}")

        def clear_all():
            """–û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –Ω–æ–º–µ—Ä–æ–≤"""
            if messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", "–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –Ω–æ–º–µ—Ä–∞?"):
                text_area.delete('1.0', 'end')

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª
                try:
                    os.makedirs('data', exist_ok=True)
                    with open(os.path.join('data', 'phone_numbers.txt'), 'w', encoding='utf-8') as f:
                        f.write('')
                except Exception as e:
                    messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {str(e)}")
                    return

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–æ 0
                self.stats['total'] = 0
                self.message_queue.put(('stats',))
                self.log_message("–í—Å–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ —É–¥–∞–ª–µ–Ω—ã –∏–∑ —Ñ–∞–π–ª–∞", 'WARNING')

        save_btn = tk.Button(button_frame, text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å",
                             command=save_numbers,
                             bg=self.colors['success'], fg='white',
                             font=('Segoe UI', 10, 'bold'),
                             relief='flat', padx=20, pady=5)
        save_btn.pack(side='left', padx=(0, 10))

        clear_btn = tk.Button(button_frame, text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å",
                              command=clear_all,
                              bg=self.colors['error'], fg='white',
                              font=('Segoe UI', 10, 'bold'),
                              relief='flat', padx=20, pady=5)
        clear_btn.pack(side='left')

        # –ö–æ–Ω—Ç–µ–Ω—Ç
        content_frame = tk.Frame(numbers_window, bg='#f5f5f5')
        content_frame.pack(fill='both', expand=True, padx=20, pady=(0, 20))

        try:
            with open(os.path.join('data', 'phone_numbers.txt'), 'r', encoding='utf-8') as f:
                content = f.read()
        except FileNotFoundError:
            content = "# –§–∞–π–ª —Å –Ω–æ–º–µ—Ä–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω\n# –î–æ–±–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n# +1234567890\n# +0987654321"

        text_area = scrolledtext.ScrolledText(content_frame,
                                              bg='#ffffff',
                                              fg=self.colors['text'],
                                              font=('Consolas', 10),
                                              relief='flat',
                                              bd=1,
                                              wrap='word')
        text_area.configure(highlightbackground=self.colors['border'],
                            highlightthickness=1)
        text_area.pack(fill='both', expand=True)
        text_area.insert('1.0', content)

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É
        info_label = tk.Label(numbers_window,
                              text="üí° –†–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ –Ω–æ–º–µ—Ä–∞ –∏ –Ω–∞–∂–º–∏—Ç–µ '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å' –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π",
                              font=('Segoe UI', 9),
                              fg=self.colors['text'],
                              bg='#f5f5f5')
        info_label.pack(pady=(0, 10))

    def export_results(self):
        """–≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        filename = filedialog.asksaveasfilename(
            defaultextension=".json",
            filetypes=[("JSON files", "*.json"), ("Text files", "*.txt")],
            title="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"
        )

        if filename:
            try:
                export_data = {
                    'timestamp': datetime.now().isoformat(),
                    'statistics': self.stats,
                    'config': {
                        'start_page': START_PAGE,
                        'end_page': END_PAGE,
                        'phone_prefix': PHONE_PREFIX
                    }
                }

                with open(filename, 'w', encoding='utf-8') as f:
                    json.dump(export_data, f, indent=2, ensure_ascii=False)

                self.log_message(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ {filename}", 'SUCCESS')
                messagebox.showinfo("–£—Å–ø–µ—Ö", f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {filename}")

            except Exception as e:
                self.log_message(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {str(e)}", 'ERROR')
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª: {str(e)}")

    def open_settings(self):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ –æ–∫–Ω–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        settings_window = tk.Toplevel(self.root)
        settings_window.title("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã")
        settings_window.geometry("800x700")
        settings_window.configure(bg='#f5f5f5')
        settings_window.resizable(True, True)

        # –î–µ–ª–∞–µ–º –æ–∫–Ω–æ –º–æ–¥–∞–ª—å–Ω—ã–º
        settings_window.transient(self.root)
        settings_window.grab_set()

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header = tk.Frame(settings_window, bg='#ffffff', height=60)
        header.pack(fill='x')
        header.pack_propagate(False)

        title = tk.Label(header, text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã",
                         font=('Segoe UI', 16, 'bold'),
                         fg=self.colors['primary'],
                         bg='#ffffff')
        title.pack(pady=20)

        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π
        main_frame = tk.Frame(settings_window, bg='#f5f5f5')
        main_frame.pack(fill='both', expand=True, padx=20, pady=(0, 10))

        # Canvas –¥–ª—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
        canvas = tk.Canvas(main_frame, bg='#f5f5f5', highlightthickness=0)
        scrollbar = ttk.Scrollbar(main_frame, orient='vertical', command=canvas.yview)
        scrollable_frame = tk.Frame(canvas, bg='#f5f5f5')

        scrollable_frame.bind('<Configure>',
                              lambda e: canvas.configure(scrollregion=canvas.bbox('all')))

        canvas.create_window((0, 0), window=scrollable_frame, anchor='nw')
        canvas.configure(yscrollcommand=scrollbar.set)

        canvas.pack(side='left', fill='both', expand=True)
        scrollbar.pack(side='right', fill='y')

        # –ü—Ä–∏–≤—è–∑–∫–∞ —Å–∫—Ä–æ–ª–ª–∞ –º—ã—à–∏
        def _on_mousewheel(event):
            canvas.yview_scroll(int(-1 * (event.delta / 120)), 'units')

        canvas.bind_all('<MouseWheel>', _on_mousewheel)

        # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
        self.settings_vars = {}

        # === –ì–†–£–ü–ü–ê: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è ===
        self.create_settings_group(scrollable_frame, "üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è", [
            ("Email:", "EMAIL", "email", str(EMAIL) if 'EMAIL' in globals() else ""),
            ("–ü–∞—Ä–æ–ª—å:", "PASSWORD", "password", str(PASSWORD) if 'PASSWORD' in globals() else "")
        ])

        # === –ì–†–£–ü–ü–ê: –ü—É—Ç–∏ ===
        self.create_settings_group(scrollable_frame, "üìÅ –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º", [
            ("–ë–∞–∑–æ–≤–∞—è –ø–∞–ø–∫–∞:", "base_path", "folder", str(base_path) if 'base_path' in globals() else ""),
            ("–ü—É—Ç—å –∫ Telegram.exe:", "telegram_exe_path", "file",
             str(telegram_exe_path) if 'telegram_exe_path' in globals() else "")
        ])

        # === –ì–†–£–ü–ü–ê: –ü–∞—Ä—Å–∏–Ω–≥ ===
        self.create_settings_group(scrollable_frame, "üîç –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞", [
            ("–ù–∞—á–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞:", "START_PAGE", "number", str(START_PAGE) if 'START_PAGE' in globals() else "1"),
            ("–ö–æ–Ω–µ—á–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞:", "END_PAGE", "number", str(END_PAGE) if 'END_PAGE' in globals() else "1"),
            ("–ü—Ä–µ—Ñ–∏–∫—Å –Ω–æ–º–µ—Ä–∞:", "PHONE_PREFIX", "text", str(PHONE_PREFIX) if 'PHONE_PREFIX' in globals() else "+55"),
            ("–ú–∏–Ω. –¥–ª–∏–Ω–∞ –Ω–æ–º–µ—Ä–∞:", "MIN_PHONE_LENGTH", "number",
             str(MIN_PHONE_LENGTH) if 'MIN_PHONE_LENGTH' in globals() else "13"),
            ("–¢–∞–π–º-–∞—É—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã (—Å–µ–∫):", "PAGE_DELAY", "number",
             str(PAGE_DELAY) if 'PAGE_DELAY' in globals() else "1"),
            ("–û–∂–∏–¥–∞–µ–º–æ–µ –∫–æ–ª-–≤–æ –Ω–æ–º–µ—Ä–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ:", "EXPECTED_NUMBERS_PER_PAGE", "number",
             str(getattr(config, 'EXPECTED_NUMBERS_PER_PAGE', 15) if 'config' in sys.modules else 15))
        ])

        # === –ì–†–£–ü–ü–ê: –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å ===
        self.create_settings_group(scrollable_frame, "üñ•Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞", [
            ("–§–æ–Ω–æ–≤—ã–π —Ä–µ–∂–∏–º –±—Ä–∞—É–∑–µ—Ä–∞:", "HEADLESS_MODE", "checkbox",
             str(HEADLESS_MODE) if 'HEADLESS_MODE' in globals() else "False")
        ])

        # === –ù–ò–ñ–ù–Ø–Ø –ü–ê–ù–ï–õ–¨ –° –ö–ù–û–ü–ö–ê–ú–ò ===
        button_frame = tk.Frame(settings_window, bg='#ffffff', height=70)
        button_frame.pack(fill='x')
        button_frame.pack_propagate(False)

        # –¢–µ–Ω—å —Å–≤–µ—Ä—Ö—É
        shadow = tk.Frame(settings_window, bg='#e1dfdd', height=1)
        shadow.pack(fill='x', before=button_frame)

        buttons_container = tk.Frame(button_frame, bg='#ffffff')
        buttons_container.pack(expand=True, pady=15)

        # –ö–Ω–æ–ø–∫–∏
        save_btn = tk.Button(buttons_container, text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å",
                             command=lambda: self.save_settings(settings_window),
                             bg=self.colors['success'], fg='white',
                             font=('Segoe UI', 10, 'bold'),
                             relief='flat', cursor='hand2',
                             padx=20, pady=8)
        save_btn.pack(side='left', padx=(0, 10))

        reset_btn = tk.Button(buttons_container, text="üîÑ –°–±—Ä–æ—Å",
                              command=self.reset_settings,
                              bg=self.colors['warning'], fg='white',
                              font=('Segoe UI', 10, 'bold'),
                              relief='flat', cursor='hand2',
                              padx=20, pady=8)
        reset_btn.pack(side='left', padx=5)

        cancel_btn = tk.Button(buttons_container, text="‚ùå –û—Ç–º–µ–Ω–∞",
                               command=settings_window.destroy,
                               bg=self.colors['surface'], fg=self.colors['text'],
                               font=('Segoe UI', 10, 'bold'),
                               relief='flat', cursor='hand2',
                               padx=20, pady=8)
        cancel_btn.pack(side='left', padx=(10, 0))

        # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –æ–∫–Ω–æ
        settings_window.update_idletasks()
        x = (settings_window.winfo_screenwidth() // 2) - (800 // 2)
        y = (settings_window.winfo_screenheight() // 2) - (700 // 2)
        settings_window.geometry(f"800x700+{x}+{y}")

    def create_settings_group(self, parent, title, settings_list):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        # –ì—Ä—É–ø–ø–∞
        group_frame = tk.LabelFrame(parent, text=title,
                                    font=('Segoe UI', 11, 'bold'),
                                    fg=self.colors['primary'],
                                    bg='#f5f5f5')
        group_frame.pack(fill='x', pady=(0, 15), padx=10)

        # –ö–æ–Ω—Ç–µ–Ω—Ç –≥—Ä—É–ø–ø—ã
        content_frame = tk.Frame(group_frame, bg='#ffffff')
        content_frame.pack(fill='x', padx=15, pady=15)

        for i, (label_text, var_name, field_type, default_value) in enumerate(settings_list):
            # –°—Ç—Ä–æ–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            row_frame = tk.Frame(content_frame, bg='#ffffff')
            row_frame.pack(fill='x', pady=5)

            # –ú–µ—Ç–∫–∞
            label = tk.Label(row_frame, text=label_text,
                             font=('Segoe UI', 9),
                             fg=self.colors['text'],
                             bg='#ffffff',
                             width=25, anchor='w')
            label.pack(side='left')

            # –ü–æ–ª–µ –≤–≤–æ–¥–∞
            if field_type == "checkbox":
                var = tk.BooleanVar()
                var.set(default_value.lower() == 'true')
                widget = tk.Checkbutton(row_frame, variable=var,
                                        bg='#ffffff', fg=self.colors['text'])
                widget.pack(side='left')

            elif field_type == "folder":
                frame = tk.Frame(row_frame, bg='#ffffff')
                frame.pack(side='left', fill='x', expand=True)

                var = tk.StringVar()
                var.set(default_value)
                entry = tk.Entry(frame, textvariable=var,
                                 font=('Segoe UI', 9),
                                 relief='flat', bd=1)
                entry.pack(side='left', fill='x', expand=True, padx=(0, 5))

                browse_btn = tk.Button(frame, text="üìÅ",
                                       command=lambda v=var: self.browse_folder(v),
                                       bg=self.colors['surface'],
                                       relief='flat', cursor='hand2',
                                       font=('Segoe UI', 8))
                browse_btn.pack(side='right')

            elif field_type == "file":
                frame = tk.Frame(row_frame, bg='#ffffff')
                frame.pack(side='left', fill='x', expand=True)

                var = tk.StringVar()
                var.set(default_value)
                entry = tk.Entry(frame, textvariable=var,
                                 font=('Segoe UI', 9),
                                 relief='flat', bd=1)
                entry.pack(side='left', fill='x', expand=True, padx=(0, 5))

                browse_btn = tk.Button(frame, text="üìÑ",
                                       command=lambda v=var: self.browse_file(v),
                                       bg=self.colors['surface'],
                                       relief='flat', cursor='hand2',
                                       font=('Segoe UI', 8))
                browse_btn.pack(side='right')

            elif field_type == "password":
                var = tk.StringVar()
                var.set(default_value)
                widget = tk.Entry(row_frame, textvariable=var,
                                  show='*',
                                  font=('Segoe UI', 9),
                                  relief='flat', bd=1,
                                  width=40)
                widget.pack(side='left', fill='x', expand=True)

            else:  # text, email, number
                var = tk.StringVar()
                var.set(default_value)
                widget = tk.Entry(row_frame, textvariable=var,
                                  font=('Segoe UI', 9),
                                  relief='flat', bd=1,
                                  width=40)
                widget.pack(side='left', fill='x', expand=True)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
            self.settings_vars[var_name] = var

    def browse_folder(self, var):
        """–í—ã–±–æ—Ä –ø–∞–ø–∫–∏"""
        folder = filedialog.askdirectory(title="–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É")
        if folder:
            var.set(folder)

    def browse_file(self, var):
        """–í—ã–±–æ—Ä —Ñ–∞–π–ª–∞"""
        file = filedialog.askopenfilename(
            title="–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª",
            filetypes=[("Executable files", "*.exe"), ("All files", "*.*")]
        )
        if file:
            var.set(file)

    def save_settings(self, window):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å –≥–æ—Ä—è—á–∏–º –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º"""
        try:
            # === 1. –ü–†–ò–ú–ï–ù–Ø–ï–ú –ù–ê–°–¢–†–û–ô–ö–ò –°–†–ê–ó–£ –í –ü–ê–ú–Ø–¢–ò ===
            self.apply_settings_runtime()

            # === 2. –°–û–•–†–ê–ù–Ø–ï–ú –í –§–ê–ô–õ config.py ===
            config_content = f"""# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –ø–∞—Ä—Å–µ—Ä–∞
# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –ø–∞–Ω–µ–ª—å—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è

# –î–∞–Ω–Ω—ã–µ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
EMAIL = "{self.settings_vars['EMAIL'].get()}"
PASSWORD = "{self.settings_vars['PASSWORD'].get()}"

# –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ, –≥–¥–µ –±—É–¥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å—Å—è –ø–∞–ø–∫–∏ —Å –Ω–æ–º–µ—Ä–∞–º–∏
base_path = r"{self.settings_vars['base_path'].get()}"

# –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É Telegram.exe
telegram_exe_path = r"{self.settings_vars['telegram_exe_path'].get()}"

# URL –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
BASE_URL = "https://secondtg.org/orders"
START_PAGE = {self.settings_vars['START_PAGE'].get()}
END_PAGE = {self.settings_vars['END_PAGE'].get()}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±—Ä–∞—É–∑–µ—Ä–∞
HEADLESS_MODE = {self.settings_vars['HEADLESS_MODE'].get()}

# –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –ü–∞—Ä—Å–µ—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞
PAGE_DELAY = {self.settings_vars['PAGE_DELAY'].get()}

# –§–∏–ª—å—Ç—Ä –¥–ª—è –Ω–æ–º–µ—Ä–æ–≤ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤
PHONE_PREFIX = "{self.settings_vars['PHONE_PREFIX'].get()}"
MIN_PHONE_LENGTH = {self.settings_vars['MIN_PHONE_LENGTH'].get()}

# –û–∂–∏–¥–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–º–µ—Ä–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ (–¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è)
EXPECTED_NUMBERS_PER_PAGE = {self.settings_vars['EXPECTED_NUMBERS_PER_PAGE'].get()}

# –§–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–æ–º–µ—Ä–æ–≤ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤
PHONE_NUMBERS_FILE = "phone_numbers.txt"
"""

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
            with open('config.py', 'w', encoding='utf-8') as f:
                f.write(config_content)

            self.log_message("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ", 'SUCCESS')
            messagebox.showinfo("–£—Å–ø–µ—Ö", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã!")

            window.destroy()

        except Exception as e:
            self.log_message(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {str(e)}", 'ERROR')
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n{str(e)}")

    def apply_settings_runtime(self):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏ –±–µ–∑ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞"""
        import sys

        # –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ –º–æ–¥—É–ª–µ config
        if 'config' in sys.modules:
            config_module = sys.modules['config']

            # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            config_module.EMAIL = self.settings_vars['EMAIL'].get()
            config_module.PASSWORD = self.settings_vars['PASSWORD'].get()

            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—É—Ç–∏
            config_module.base_path = self.settings_vars['base_path'].get()
            config_module.telegram_exe_path = self.settings_vars['telegram_exe_path'].get()

            # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞
            config_module.START_PAGE = int(self.settings_vars['START_PAGE'].get())
            config_module.END_PAGE = int(self.settings_vars['END_PAGE'].get())
            config_module.PHONE_PREFIX = self.settings_vars['PHONE_PREFIX'].get()
            config_module.MIN_PHONE_LENGTH = int(self.settings_vars['MIN_PHONE_LENGTH'].get())
            config_module.PAGE_DELAY = int(self.settings_vars['PAGE_DELAY'].get())
            config_module.EXPECTED_NUMBERS_PER_PAGE = int(self.settings_vars['EXPECTED_NUMBERS_PER_PAGE'].get())

            # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
            config_module.HEADLESS_MODE = self.settings_vars['HEADLESS_MODE'].get()

            self.log_message("üî• –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –≤ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏", 'SUCCESS')

        # –¢–∞–∫–∂–µ –æ–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –º–æ–¥—É–ª–µ
        import __main__
        if hasattr(__main__, '__file__'):
            globals().update({
                'EMAIL': self.settings_vars['EMAIL'].get(),
                'PASSWORD': self.settings_vars['PASSWORD'].get(),
                'base_path': self.settings_vars['base_path'].get(),
                'telegram_exe_path': self.settings_vars['telegram_exe_path'].get(),
                'START_PAGE': int(self.settings_vars['START_PAGE'].get()),
                'END_PAGE': int(self.settings_vars['END_PAGE'].get()),
                'PHONE_PREFIX': self.settings_vars['PHONE_PREFIX'].get(),
                'MIN_PHONE_LENGTH': int(self.settings_vars['MIN_PHONE_LENGTH'].get()),
                'PAGE_DELAY': int(self.settings_vars['PAGE_DELAY'].get()),
                'EXPECTED_NUMBERS_PER_PAGE': int(self.settings_vars['EXPECTED_NUMBERS_PER_PAGE'].get()),
                'HEADLESS_MODE': self.settings_vars['HEADLESS_MODE'].get()
            })

        # –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –ø–∞—Ä—Å–µ—Ä–∞ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è - –æ–±–Ω–æ–≤–ª—è–µ–º –∏—Ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        if hasattr(self, 'parser') and self.parser:
            try:
                # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä—Å–µ—Ä–∞
                self.parser.start_page = int(self.settings_vars['START_PAGE'].get())
                self.parser.end_page = int(self.settings_vars['END_PAGE'].get())
                self.log_message("üì° –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä—Å–µ—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã", 'INFO')
            except:
                pass

        if hasattr(self, 'auto_sender') and self.auto_sender:
            try:
                # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–π –ø—É—Ç—å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
                self.auto_sender.base_path = self.settings_vars['base_path'].get()
                self.log_message("üì§ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã", 'INFO')
            except:
                pass

    def apply_settings_only(self):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ —Ñ–∞–π–ª"""
        try:
            self.apply_settings_runtime()
            self.log_message("üî• –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –≤ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏ (–Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã)", 'SUCCESS')
            messagebox.showinfo("–ü—Ä–∏–º–µ–Ω–µ–Ω–æ",
                                "‚ö° –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –≤ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏!\nüí° –î–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å'")
        except Exception as e:
            self.log_message(f"–û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {str(e)}", 'ERROR')
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n{str(e)}")

    def reset_settings(self):
        """–°–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        result = messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ",
                                     "–°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é?")
        if result:
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            defaults = {
                'EMAIL': '',
                'PASSWORD': '',
                'base_path': '',
                'telegram_exe_path': '',
                'START_PAGE': '1',
                'END_PAGE': '1',
                'PHONE_PREFIX': '+55',
                'MIN_PHONE_LENGTH': '13',
                'PAGE_DELAY': '1',
                'EXPECTED_NUMBERS_PER_PAGE': '15',
                'HEADLESS_MODE': False
            }

            for key, default in defaults.items():
                if key in self.settings_vars:
                    if isinstance(self.settings_vars[key], tk.BooleanVar):
                        self.settings_vars[key].set(default)
                    else:
                        self.settings_vars[key].set(str(default))

            messagebox.showinfo("–ì–æ—Ç–æ–≤–æ", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")

    def clear_data(self):
        """–û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö"""
        result = messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ",
                                     "–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏ —Å–±—Ä–æ—Å–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É?")
        if result:
            try:
                # –û—á–∏—Å—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤
                files_to_clear = [
                    os.path.join('data', 'phone_numbers.txt'),
                ]

                for file_path in files_to_clear:
                    if os.path.exists(file_path):
                        os.remove(file_path)

                # –°–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                self.reset_stats()

                self.log_message("–í—Å–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã", 'WARNING')
                self.update_status("–î–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã", 'WARNING')

            except Exception as e:
                self.log_message(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: {str(e)}", 'ERROR')

    def update_stats(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–∑ —Ñ–∞–π–ª–æ–≤"""
        try:
            # –ü–æ–¥—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞ –Ω–æ–º–µ—Ä–æ–≤
            phone_file = os.path.join('data', 'phone_numbers.txt')
            if os.path.exists(phone_file):
                with open(phone_file, 'r', encoding='utf-8') as f:
                    lines = f.readlines()

                total = 0
                processed = 0
                banned = 0
                no_code = 0

                for line in lines:
                    if '+55' in line:
                        total += 1
                        if '+' in line and 'OTP –∫–æ–¥:' in line:
                            processed += 1
                        elif '- BAN' in line:
                            banned += 1
                        elif '- nocode' in line:
                            no_code += 1

                self.stats.update({
                    'total': total,
                    'processed': processed,
                    'banned': banned,
                    'no_code': no_code
                })

                self.message_queue.put(('stats',))

        except Exception as e:
            self.log_message(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}", 'WARNING')

    def run(self):
        """–ó–∞–ø—É—Å–∫ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        self.log_message("–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø—É—â–µ–Ω–∞", 'SUCCESS')
        self.log_message("–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ", 'INFO')
        self.root.mainloop()


if __name__ == "__main__":
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤
    required_files = ['config.py', 'auto_telegram_sender.py', 'phone_parser.py', 'create_telegram_folders.py']
    missing_files = [f for f in required_files if not os.path.exists(f)]

    if missing_files:
        print("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã:")
        for file in missing_files:
            print(f"   - {file}")
        print("\n–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ —Ñ–∞–π–ª—ã –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –æ–¥–Ω–æ–π –ø–∞–ø–∫–µ —Å –ø–∞–Ω–µ–ª—å—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.")
        input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...")
    else:
        # –ó–∞–ø—É—Å–∫ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        app = TelegramControlPanel()
        app.run()
