import time
import os
import re
import sys
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from webdriver_manager.chrome import ChromeDriverManager
from config import *  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ config.py


class PhoneNumberParser:
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ä—Å–µ—Ä–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π Selenium"""
        self.setup_driver()

    def setup_driver(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Chrome WebDriver"""
        chrome_options = Options()

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–æ–Ω–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        if HEADLESS_MODE:
            chrome_options.add_argument("--headless")

        chrome_options.add_argument("--no-sandbox")
        chrome_options.add_argument("--disable-dev-shm-usage")
        chrome_options.add_argument("--disable-gpu")
        chrome_options.add_argument("--window-size=1920,1080")

        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ ChromeDriver
        service = Service(ChromeDriverManager().install())
        self.driver = webdriver.Chrome(service=service, options=chrome_options)

    def login(self, start_page=None):
        print("üîê –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...")
        self.driver.get("https://secondtg.org/login")
        try:
            email_field = WebDriverWait(self.driver, 10).until(
                EC.presence_of_element_located((By.NAME, "email"))
            )
            email_field.clear()
            email_field.send_keys(EMAIL)
            password_field = self.driver.find_element(By.NAME, "password")
            password_field.clear()
            password_field.send_keys(PASSWORD)
            login_button = self.driver.find_element(By.XPATH, "//button[contains(text(), 'Login')]")
            login_button.click()

            # –ñ–¥–µ–º –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            WebDriverWait(self.driver, 10).until(
                lambda d: "login" not in d.current_url.lower()
            )

            print("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!")

            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –Ω—É–∂–Ω—É—é —Å—Ç–∞—Ä—Ç–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
            page_to_load = start_page if start_page is not None else START_PAGE
            print(f"üöÄ –ü—Ä—è–º–æ–π –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É {page_to_load}")
            first_page_url = f"{BASE_URL}?page={page_to_load}"
            self.driver.get(first_page_url)

            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
            return False

    def parse_all_pages(self, start_page=None, end_page=None):
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–ª–∏ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
        start = start_page if start_page is not None else START_PAGE
        end = end_page if end_page is not None else END_PAGE

        all_phone_numbers = []
        for page_num in range(start, end + 1):
            # –î–ª—è –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–µ –¥–µ–ª–∞–µ–º –ø–µ—Ä–µ—Ö–æ–¥, —Ç–∞–∫ –∫–∞–∫ –º—ã —É–∂–µ –Ω–∞ –Ω–µ–π –ø–æ—Å–ª–µ login()
            if page_num != start:
                print(f"üîç –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É {page_num}...")
                page_url = f"{BASE_URL}?page={page_num}"
                self.driver.get(page_url)
            else:
                print(f"üîç –ü–∞—Ä—Å–∏–Ω–≥ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã {page_num}...")

            # –ñ–¥–µ–º –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ –ø–∞—Ä—Å–∏–º –Ω–æ–º–µ—Ä–∞
            page_numbers = self.wait_and_parse_page()
            all_phone_numbers.extend(page_numbers)
            print(f"‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page_num}: {len(page_numbers)} –Ω–æ–º–µ—Ä–æ–≤")

        print(f"üéØ –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ –Ω–æ–º–µ—Ä–æ–≤: {len(all_phone_numbers)}")
        return all_phone_numbers

    def wait_and_parse_page(self):
        """–ñ–¥–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ –ø–∞—Ä—Å–∏—Ç –Ω–æ–º–µ—Ä–∞"""
        try:
            # –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            WebDriverWait(self.driver, 10).until(
                EC.any_of(
                    EC.presence_of_element_located((By.CSS_SELECTOR, "table")),
                    EC.presence_of_element_located((By.CSS_SELECTOR, ".order-item")),
                    EC.presence_of_element_located((By.CSS_SELECTOR, ".list-group")),
                    EC.presence_of_element_located((By.CSS_SELECTOR, ".card")),
                    EC.presence_of_element_located((By.CSS_SELECTOR, ".content")),
                    EC.presence_of_element_located((By.CSS_SELECTOR, "main")),
                    EC.presence_of_element_located((By.CSS_SELECTOR, ".container"))
                )
            )

            # –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–æ —Ç–µ—Ö –ø–æ—Ä, –ø–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–º–µ—Ä–æ–≤
            max_attempts = 30  # –º–∞–∫—Å–∏–º—É–º 15 —Å–µ–∫—É–Ω–¥ –æ–∂–∏–¥–∞–Ω–∏—è (30 * 0.5)
            expected_numbers = getattr(sys.modules.get('config'), 'EXPECTED_NUMBERS_PER_PAGE', 15)

            for attempt in range(max_attempts):
                page_source = self.driver.page_source
                current_numbers = self.extract_phone_numbers(page_source)
                current_count = len(current_numbers)

                # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–º–µ—Ä–æ–≤ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                if current_count >= expected_numbers:
                    return current_numbers

                # –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —á—Ç–æ –µ—Å—Ç—å
                if attempt == max_attempts - 1:
                    print(f"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ —Ç–æ–ª—å–∫–æ {current_count} –Ω–æ–º–µ—Ä–æ–≤ (–æ–∂–∏–¥–∞–ª–æ—Å—å {expected_numbers})")
                    return current_numbers

                time.sleep(0.5)  # –ö–æ—Ä–æ—Ç–∫–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏

            return []

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {e}")
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø—ã—Ç–∞–µ–º—Å—è —Å–ø–∞—Ä—Å–∏—Ç—å —Ç–æ, —á—Ç–æ –µ—Å—Ç—å
            try:
                page_source = self.driver.page_source
                return self.extract_phone_numbers(page_source)
            except:
                return []

    def extract_phone_numbers(self, html_content):
        phone_numbers = []
        pattern = r'\+55[0-9\s\-\(\)\.]+'
        for match in re.finditer(pattern, html_content):
            cleaned_number = re.sub(r'[^\d\+]', '', match.group())
            if cleaned_number.startswith(PHONE_PREFIX) and len(cleaned_number) >= MIN_PHONE_LENGTH:
                if cleaned_number not in phone_numbers:
                    phone_numbers.append(cleaned_number)
        return phone_numbers

    def save_results(self, phone_numbers, phones_per_page=15):
        os.makedirs('data', exist_ok=True)
        txt_path = os.path.join('data', 'phone_numbers.txt')
        with open(txt_path, 'w', encoding='utf-8') as f:
            total = len(phone_numbers)
            page = START_PAGE
            for i, number in enumerate(phone_numbers, 1):
                if (i - 1) % phones_per_page == 0:
                    if i != 1:
                        f.write('\n')
                    f.write(f"=== –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page} ===\n")
                    page += 1
                f.write(f"{i}. {number}\n")
        print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {txt_path}")

    def close(self):
        if self.driver:
            self.driver.quit()


def main():
    parser = PhoneNumberParser()
    try:
        if not parser.login():
            return
        # –ü–æ—Å–ª–µ –ª–æ–≥–∏–Ω–∞ –º—ã —É–∂–µ –Ω–∞ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ orders, –Ω–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥
        phone_numbers = parser.parse_all_pages()
        print(f"–í—Å–µ–≥–æ –Ω–æ–º–µ—Ä–æ–≤ –Ω–∞–π–¥–µ–Ω–æ: {len(phone_numbers)}")
        parser.save_results(phone_numbers)
    finally:
        parser.close()


if __name__ == "__main__":
    main()
